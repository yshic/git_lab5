
mcu_lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080045dc  080045dc  000145dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004650  08004650  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004650  08004650  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004650  08004650  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004650  08004650  00014650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004654  08004654  00014654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  2000005c  080046b4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  080046b4  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e5cd  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002600  00000000  00000000  0002e695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  00030c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b3f  00000000  00000000  00031b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000187e8  00000000  00000000  00032657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001124c  00000000  00000000  0004ae3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d716  00000000  00000000  0005c08b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004068  00000000  00000000  000e97a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000ed80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080045c4 	.word	0x080045c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080045c4 	.word	0x080045c4

0800014c <clearBuffer>:
uint8_t buffer[MAX_BUFFER_SIZE];
uint32_t ADC_value = 0;
char str[100];
int cmd = 0;

void clearBuffer(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	memset(buffer, 0, sizeof(buffer));
 8000150:	221e      	movs	r2, #30
 8000152:	2100      	movs	r1, #0
 8000154:	4803      	ldr	r0, [pc, #12]	; (8000164 <clearBuffer+0x18>)
 8000156:	f003 fda3 	bl	8003ca0 <memset>
	index_buffer = 0;
 800015a:	4b03      	ldr	r3, [pc, #12]	; (8000168 <clearBuffer+0x1c>)
 800015c:	2200      	movs	r2, #0
 800015e:	701a      	strb	r2, [r3, #0]
}
 8000160:	bf00      	nop
 8000162:	bd80      	pop	{r7, pc}
 8000164:	20000084 	.word	0x20000084
 8000168:	20000081 	.word	0x20000081

0800016c <compare>:
int compare(){
 800016c:	b480      	push	{r7}
 800016e:	af00      	add	r7, sp, #0
	if(buffer[index_buffer - 4] == 'R' && buffer[index_buffer - 3] == 'S' && buffer[index_buffer - 2] == 'T'){
 8000170:	4b15      	ldr	r3, [pc, #84]	; (80001c8 <compare+0x5c>)
 8000172:	781b      	ldrb	r3, [r3, #0]
 8000174:	3b04      	subs	r3, #4
 8000176:	4a15      	ldr	r2, [pc, #84]	; (80001cc <compare+0x60>)
 8000178:	5cd3      	ldrb	r3, [r2, r3]
 800017a:	2b52      	cmp	r3, #82	; 0x52
 800017c:	d10f      	bne.n	800019e <compare+0x32>
 800017e:	4b12      	ldr	r3, [pc, #72]	; (80001c8 <compare+0x5c>)
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	3b03      	subs	r3, #3
 8000184:	4a11      	ldr	r2, [pc, #68]	; (80001cc <compare+0x60>)
 8000186:	5cd3      	ldrb	r3, [r2, r3]
 8000188:	2b53      	cmp	r3, #83	; 0x53
 800018a:	d108      	bne.n	800019e <compare+0x32>
 800018c:	4b0e      	ldr	r3, [pc, #56]	; (80001c8 <compare+0x5c>)
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	3b02      	subs	r3, #2
 8000192:	4a0e      	ldr	r2, [pc, #56]	; (80001cc <compare+0x60>)
 8000194:	5cd3      	ldrb	r3, [r2, r3]
 8000196:	2b54      	cmp	r3, #84	; 0x54
 8000198:	d101      	bne.n	800019e <compare+0x32>
		return RST;
 800019a:	2303      	movs	r3, #3
 800019c:	e010      	b.n	80001c0 <compare+0x54>
	}
	else if(buffer[index_buffer - 3] == 'O' && buffer[index_buffer - 2] == 'K'){
 800019e:	4b0a      	ldr	r3, [pc, #40]	; (80001c8 <compare+0x5c>)
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	3b03      	subs	r3, #3
 80001a4:	4a09      	ldr	r2, [pc, #36]	; (80001cc <compare+0x60>)
 80001a6:	5cd3      	ldrb	r3, [r2, r3]
 80001a8:	2b4f      	cmp	r3, #79	; 0x4f
 80001aa:	d108      	bne.n	80001be <compare+0x52>
 80001ac:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <compare+0x5c>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	3b02      	subs	r3, #2
 80001b2:	4a06      	ldr	r2, [pc, #24]	; (80001cc <compare+0x60>)
 80001b4:	5cd3      	ldrb	r3, [r2, r3]
 80001b6:	2b4b      	cmp	r3, #75	; 0x4b
 80001b8:	d101      	bne.n	80001be <compare+0x52>
		return OK;
 80001ba:	2304      	movs	r3, #4
 80001bc:	e000      	b.n	80001c0 <compare+0x54>
	}
	return 0;
 80001be:	2300      	movs	r3, #0
}
 80001c0:	4618      	mov	r0, r3
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	20000081 	.word	0x20000081
 80001cc:	20000084 	.word	0x20000084

080001d0 <command_parser_fsm>:
void command_parser_fsm(){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	if(buffer_flag == 1){
 80001d4:	4b2b      	ldr	r3, [pc, #172]	; (8000284 <command_parser_fsm+0xb4>)
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	2b01      	cmp	r3, #1
 80001da:	d14e      	bne.n	800027a <command_parser_fsm+0xaa>
		switch(status){
 80001dc:	4b2a      	ldr	r3, [pc, #168]	; (8000288 <command_parser_fsm+0xb8>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <command_parser_fsm+0x1a>
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d00b      	beq.n	8000200 <command_parser_fsm+0x30>
					break;
				}
			}
			break;
		default:
			break;
 80001e8:	e047      	b.n	800027a <command_parser_fsm+0xaa>
			if(buffer[index_buffer - 1] == '!'){
 80001ea:	4b28      	ldr	r3, [pc, #160]	; (800028c <command_parser_fsm+0xbc>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	3b01      	subs	r3, #1
 80001f0:	4a27      	ldr	r2, [pc, #156]	; (8000290 <command_parser_fsm+0xc0>)
 80001f2:	5cd3      	ldrb	r3, [r2, r3]
 80001f4:	2b21      	cmp	r3, #33	; 0x21
 80001f6:	d13d      	bne.n	8000274 <command_parser_fsm+0xa4>
				status = RECEIVE;
 80001f8:	4b23      	ldr	r3, [pc, #140]	; (8000288 <command_parser_fsm+0xb8>)
 80001fa:	2201      	movs	r2, #1
 80001fc:	601a      	str	r2, [r3, #0]
			break;
 80001fe:	e039      	b.n	8000274 <command_parser_fsm+0xa4>
			if(buffer[index_buffer - 1] == '#'){
 8000200:	4b22      	ldr	r3, [pc, #136]	; (800028c <command_parser_fsm+0xbc>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	3b01      	subs	r3, #1
 8000206:	4a22      	ldr	r2, [pc, #136]	; (8000290 <command_parser_fsm+0xc0>)
 8000208:	5cd3      	ldrb	r3, [r2, r3]
 800020a:	2b23      	cmp	r3, #35	; 0x23
 800020c:	d134      	bne.n	8000278 <command_parser_fsm+0xa8>
				cmd = compare();
 800020e:	f7ff ffad 	bl	800016c <compare>
 8000212:	4603      	mov	r3, r0
 8000214:	4a1f      	ldr	r2, [pc, #124]	; (8000294 <command_parser_fsm+0xc4>)
 8000216:	6013      	str	r3, [r2, #0]
				if(cmd == RST){
 8000218:	4b1e      	ldr	r3, [pc, #120]	; (8000294 <command_parser_fsm+0xc4>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2b03      	cmp	r3, #3
 800021e:	d114      	bne.n	800024a <command_parser_fsm+0x7a>
					command_flag = 1;
 8000220:	4b1d      	ldr	r3, [pc, #116]	; (8000298 <command_parser_fsm+0xc8>)
 8000222:	2201      	movs	r2, #1
 8000224:	601a      	str	r2, [r3, #0]
					HAL_ADC_Start(&hadc1);
 8000226:	481d      	ldr	r0, [pc, #116]	; (800029c <command_parser_fsm+0xcc>)
 8000228:	f000 fff0 	bl	800120c <HAL_ADC_Start>
					ADC_value = HAL_ADC_GetValue(&hadc1);
 800022c:	481b      	ldr	r0, [pc, #108]	; (800029c <command_parser_fsm+0xcc>)
 800022e:	f001 f8c7 	bl	80013c0 <HAL_ADC_GetValue>
 8000232:	4603      	mov	r3, r0
 8000234:	4a1a      	ldr	r2, [pc, #104]	; (80002a0 <command_parser_fsm+0xd0>)
 8000236:	6013      	str	r3, [r2, #0]
					HAL_ADC_Stop(&hadc1);
 8000238:	4818      	ldr	r0, [pc, #96]	; (800029c <command_parser_fsm+0xcc>)
 800023a:	f001 f895 	bl	8001368 <HAL_ADC_Stop>
					status = INIT;
 800023e:	4b12      	ldr	r3, [pc, #72]	; (8000288 <command_parser_fsm+0xb8>)
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
					clearBuffer();
 8000244:	f7ff ff82 	bl	800014c <clearBuffer>
					break;
 8000248:	e017      	b.n	800027a <command_parser_fsm+0xaa>
				else if(cmd == OK){
 800024a:	4b12      	ldr	r3, [pc, #72]	; (8000294 <command_parser_fsm+0xc4>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	2b04      	cmp	r3, #4
 8000250:	d112      	bne.n	8000278 <command_parser_fsm+0xa8>
					command_flag = 0;
 8000252:	4b11      	ldr	r3, [pc, #68]	; (8000298 <command_parser_fsm+0xc8>)
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
					status = INIT;
 8000258:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <command_parser_fsm+0xb8>)
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
					timer_flag[0] = 1;
 800025e:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <command_parser_fsm+0xd4>)
 8000260:	2201      	movs	r2, #1
 8000262:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000264:	2201      	movs	r2, #1
 8000266:	2120      	movs	r1, #32
 8000268:	480f      	ldr	r0, [pc, #60]	; (80002a8 <command_parser_fsm+0xd8>)
 800026a:	f001 fd85 	bl	8001d78 <HAL_GPIO_WritePin>
					clearBuffer();
 800026e:	f7ff ff6d 	bl	800014c <clearBuffer>
					break;
 8000272:	e002      	b.n	800027a <command_parser_fsm+0xaa>
			break;
 8000274:	bf00      	nop
 8000276:	e000      	b.n	800027a <command_parser_fsm+0xaa>
			break;
 8000278:	bf00      	nop
		}
	}
	buffer_flag = 0;
 800027a:	4b02      	ldr	r3, [pc, #8]	; (8000284 <command_parser_fsm+0xb4>)
 800027c:	2200      	movs	r2, #0
 800027e:	701a      	strb	r2, [r3, #0]
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000082 	.word	0x20000082
 8000288:	20000078 	.word	0x20000078
 800028c:	20000081 	.word	0x20000081
 8000290:	20000084 	.word	0x20000084
 8000294:	2000010c 	.word	0x2000010c
 8000298:	2000007c 	.word	0x2000007c
 800029c:	20000110 	.word	0x20000110
 80002a0:	200000a4 	.word	0x200000a4
 80002a4:	200002b4 	.word	0x200002b4
 80002a8:	40010800 	.word	0x40010800

080002ac <uart_communication_fsm>:

void uart_communication_fsm(){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	switch(command_flag){
 80002b0:	4b16      	ldr	r3, [pc, #88]	; (800030c <uart_communication_fsm+0x60>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d123      	bne.n	8000300 <uart_communication_fsm+0x54>
	case 1:
		if(timer_flag[0] == 1){
 80002b8:	4b15      	ldr	r3, [pc, #84]	; (8000310 <uart_communication_fsm+0x64>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d121      	bne.n	8000304 <uart_communication_fsm+0x58>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 80002c0:	2120      	movs	r1, #32
 80002c2:	4814      	ldr	r0, [pc, #80]	; (8000314 <uart_communication_fsm+0x68>)
 80002c4:	f001 fd70 	bl	8001da8 <HAL_GPIO_TogglePin>
			HAL_UART_Transmit(&huart2, "\r\n !ADC=",10,1000);
 80002c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002cc:	220a      	movs	r2, #10
 80002ce:	4912      	ldr	r1, [pc, #72]	; (8000318 <uart_communication_fsm+0x6c>)
 80002d0:	4812      	ldr	r0, [pc, #72]	; (800031c <uart_communication_fsm+0x70>)
 80002d2:	f002 fe9d 	bl	8003010 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "%d#\r\n", ADC_value), 1000);
 80002d6:	4b12      	ldr	r3, [pc, #72]	; (8000320 <uart_communication_fsm+0x74>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	461a      	mov	r2, r3
 80002dc:	4911      	ldr	r1, [pc, #68]	; (8000324 <uart_communication_fsm+0x78>)
 80002de:	4812      	ldr	r0, [pc, #72]	; (8000328 <uart_communication_fsm+0x7c>)
 80002e0:	f003 fcbe 	bl	8003c60 <siprintf>
 80002e4:	4603      	mov	r3, r0
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ec:	490e      	ldr	r1, [pc, #56]	; (8000328 <uart_communication_fsm+0x7c>)
 80002ee:	480b      	ldr	r0, [pc, #44]	; (800031c <uart_communication_fsm+0x70>)
 80002f0:	f002 fe8e 	bl	8003010 <HAL_UART_Transmit>
			setTimer(3000, 0);
 80002f4:	2100      	movs	r1, #0
 80002f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80002fa:	f000 fc8b 	bl	8000c14 <setTimer>
		}
		break;
 80002fe:	e001      	b.n	8000304 <uart_communication_fsm+0x58>
	default:
		break;
 8000300:	bf00      	nop
 8000302:	e000      	b.n	8000306 <uart_communication_fsm+0x5a>
		break;
 8000304:	bf00      	nop
	}
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	2000007c 	.word	0x2000007c
 8000310:	200002b4 	.word	0x200002b4
 8000314:	40010800 	.word	0x40010800
 8000318:	080045dc 	.word	0x080045dc
 800031c:	20000188 	.word	0x20000188
 8000320:	200000a4 	.word	0x200000a4
 8000324:	080045e8 	.word	0x080045e8
 8000328:	200000a8 	.word	0x200000a8

0800032c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART2){
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a13      	ldr	r2, [pc, #76]	; (8000388 <HAL_UART_RxCpltCallback+0x5c>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d11f      	bne.n	800037e <HAL_UART_RxCpltCallback+0x52>
		HAL_UART_Transmit (&huart2 , &temp, 1, 50);
 800033e:	2332      	movs	r3, #50	; 0x32
 8000340:	2201      	movs	r2, #1
 8000342:	4912      	ldr	r1, [pc, #72]	; (800038c <HAL_UART_RxCpltCallback+0x60>)
 8000344:	4812      	ldr	r0, [pc, #72]	; (8000390 <HAL_UART_RxCpltCallback+0x64>)
 8000346:	f002 fe63 	bl	8003010 <HAL_UART_Transmit>
		buffer[index_buffer++] = temp;
 800034a:	4b12      	ldr	r3, [pc, #72]	; (8000394 <HAL_UART_RxCpltCallback+0x68>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	1c5a      	adds	r2, r3, #1
 8000350:	b2d1      	uxtb	r1, r2
 8000352:	4a10      	ldr	r2, [pc, #64]	; (8000394 <HAL_UART_RxCpltCallback+0x68>)
 8000354:	7011      	strb	r1, [r2, #0]
 8000356:	461a      	mov	r2, r3
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <HAL_UART_RxCpltCallback+0x60>)
 800035a:	7819      	ldrb	r1, [r3, #0]
 800035c:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <HAL_UART_RxCpltCallback+0x6c>)
 800035e:	5499      	strb	r1, [r3, r2]
		if(index_buffer == MAX_BUFFER_SIZE) index_buffer = 0;
 8000360:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <HAL_UART_RxCpltCallback+0x68>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b1e      	cmp	r3, #30
 8000366:	d102      	bne.n	800036e <HAL_UART_RxCpltCallback+0x42>
 8000368:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <HAL_UART_RxCpltCallback+0x68>)
 800036a:	2200      	movs	r2, #0
 800036c:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 800036e:	4b0b      	ldr	r3, [pc, #44]	; (800039c <HAL_UART_RxCpltCallback+0x70>)
 8000370:	2201      	movs	r2, #1
 8000372:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT (&huart2 , &temp, 1);
 8000374:	2201      	movs	r2, #1
 8000376:	4905      	ldr	r1, [pc, #20]	; (800038c <HAL_UART_RxCpltCallback+0x60>)
 8000378:	4805      	ldr	r0, [pc, #20]	; (8000390 <HAL_UART_RxCpltCallback+0x64>)
 800037a:	f002 fecc 	bl	8003116 <HAL_UART_Receive_IT>
	}
}
 800037e:	bf00      	nop
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40004400 	.word	0x40004400
 800038c:	20000080 	.word	0x20000080
 8000390:	20000188 	.word	0x20000188
 8000394:	20000081 	.word	0x20000081
 8000398:	20000084 	.word	0x20000084
 800039c:	20000082 	.word	0x20000082

080003a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a4:	f000 fdf8 	bl	8000f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a8:	f000 f836 	bl	8000418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ac:	f000 f938 	bl	8000620 <MX_GPIO_Init>
  MX_ADC1_Init();
 80003b0:	f000 f882 	bl	80004b8 <MX_ADC1_Init>
  MX_TIM2_Init();
 80003b4:	f000 f8be 	bl	8000534 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80003b8:	f000 f908 	bl	80005cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80003bc:	4810      	ldr	r0, [pc, #64]	; (8000400 <main+0x60>)
 80003be:	f002 fa3f 	bl	8002840 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT (&huart2 , &temp, 1);
 80003c2:	2201      	movs	r2, #1
 80003c4:	490f      	ldr	r1, [pc, #60]	; (8000404 <main+0x64>)
 80003c6:	4810      	ldr	r0, [pc, #64]	; (8000408 <main+0x68>)
 80003c8:	f002 fea5 	bl	8003116 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 80003cc:	f000 f96a 	bl	80006a4 <SCH_Init>
  setTimer(1000, 0);
 80003d0:	2100      	movs	r1, #0
 80003d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003d6:	f000 fc1d 	bl	8000c14 <setTimer>
  SCH_Add_Task(timerRun, 0, 1);
 80003da:	2201      	movs	r2, #1
 80003dc:	2100      	movs	r1, #0
 80003de:	480b      	ldr	r0, [pc, #44]	; (800040c <main+0x6c>)
 80003e0:	f000 f9c6 	bl	8000770 <SCH_Add_Task>
  SCH_Add_Task(command_parser_fsm, 0, 1);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2100      	movs	r1, #0
 80003e8:	4809      	ldr	r0, [pc, #36]	; (8000410 <main+0x70>)
 80003ea:	f000 f9c1 	bl	8000770 <SCH_Add_Task>
  SCH_Add_Task(uart_communication_fsm, 0, 1);
 80003ee:	2201      	movs	r2, #1
 80003f0:	2100      	movs	r1, #0
 80003f2:	4808      	ldr	r0, [pc, #32]	; (8000414 <main+0x74>)
 80003f4:	f000 f9bc 	bl	8000770 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 80003f8:	f000 fbe0 	bl	8000bbc <SCH_Dispatch_Tasks>
 80003fc:	e7fc      	b.n	80003f8 <main+0x58>
 80003fe:	bf00      	nop
 8000400:	20000140 	.word	0x20000140
 8000404:	20000080 	.word	0x20000080
 8000408:	20000188 	.word	0x20000188
 800040c:	08000c55 	.word	0x08000c55
 8000410:	080001d1 	.word	0x080001d1
 8000414:	080002ad 	.word	0x080002ad

08000418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b094      	sub	sp, #80	; 0x50
 800041c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000422:	2228      	movs	r2, #40	; 0x28
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f003 fc3a 	bl	8003ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042c:	f107 0314 	add.w	r3, r7, #20
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
 8000438:	60da      	str	r2, [r3, #12]
 800043a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000448:	2302      	movs	r3, #2
 800044a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044c:	2301      	movs	r3, #1
 800044e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000450:	2310      	movs	r3, #16
 8000452:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000454:	2300      	movs	r3, #0
 8000456:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000458:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800045c:	4618      	mov	r0, r3
 800045e:	f001 fcd9 	bl	8001e14 <HAL_RCC_OscConfig>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000468:	f000 f916 	bl	8000698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800046c:	230f      	movs	r3, #15
 800046e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000470:	2300      	movs	r3, #0
 8000472:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000480:	f107 0314 	add.w	r3, r7, #20
 8000484:	2100      	movs	r1, #0
 8000486:	4618      	mov	r0, r3
 8000488:	f001 ff46 	bl	8002318 <HAL_RCC_ClockConfig>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000492:	f000 f901 	bl	8000698 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000496:	2302      	movs	r3, #2
 8000498:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800049a:	2300      	movs	r3, #0
 800049c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	4618      	mov	r0, r3
 80004a2:	f002 f8c7 	bl	8002634 <HAL_RCCEx_PeriphCLKConfig>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80004ac:	f000 f8f4 	bl	8000698 <Error_Handler>
  }
}
 80004b0:	bf00      	nop
 80004b2:	3750      	adds	r7, #80	; 0x50
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004c8:	4b18      	ldr	r3, [pc, #96]	; (800052c <MX_ADC1_Init+0x74>)
 80004ca:	4a19      	ldr	r2, [pc, #100]	; (8000530 <MX_ADC1_Init+0x78>)
 80004cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ce:	4b17      	ldr	r3, [pc, #92]	; (800052c <MX_ADC1_Init+0x74>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004d4:	4b15      	ldr	r3, [pc, #84]	; (800052c <MX_ADC1_Init+0x74>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004da:	4b14      	ldr	r3, [pc, #80]	; (800052c <MX_ADC1_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004e0:	4b12      	ldr	r3, [pc, #72]	; (800052c <MX_ADC1_Init+0x74>)
 80004e2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80004e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004e8:	4b10      	ldr	r3, [pc, #64]	; (800052c <MX_ADC1_Init+0x74>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <MX_ADC1_Init+0x74>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004f4:	480d      	ldr	r0, [pc, #52]	; (800052c <MX_ADC1_Init+0x74>)
 80004f6:	f000 fdb1 	bl	800105c <HAL_ADC_Init>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000500:	f000 f8ca 	bl	8000698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000504:	2300      	movs	r3, #0
 8000506:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000508:	2301      	movs	r3, #1
 800050a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	4619      	mov	r1, r3
 8000514:	4805      	ldr	r0, [pc, #20]	; (800052c <MX_ADC1_Init+0x74>)
 8000516:	f000 ff5f 	bl	80013d8 <HAL_ADC_ConfigChannel>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000520:	f000 f8ba 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000524:	bf00      	nop
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000110 	.word	0x20000110
 8000530:	40012400 	.word	0x40012400

08000534 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800053a:	f107 0308 	add.w	r3, r7, #8
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000548:	463b      	mov	r3, r7
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000550:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <MX_TIM2_Init+0x94>)
 8000552:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000556:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000558:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <MX_TIM2_Init+0x94>)
 800055a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800055e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000560:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <MX_TIM2_Init+0x94>)
 8000562:	2200      	movs	r2, #0
 8000564:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000566:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_TIM2_Init+0x94>)
 8000568:	2209      	movs	r2, #9
 800056a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800056c:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <MX_TIM2_Init+0x94>)
 800056e:	2200      	movs	r2, #0
 8000570:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <MX_TIM2_Init+0x94>)
 8000574:	2200      	movs	r2, #0
 8000576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000578:	4813      	ldr	r0, [pc, #76]	; (80005c8 <MX_TIM2_Init+0x94>)
 800057a:	f002 f911 	bl	80027a0 <HAL_TIM_Base_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000584:	f000 f888 	bl	8000698 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800058c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800058e:	f107 0308 	add.w	r3, r7, #8
 8000592:	4619      	mov	r1, r3
 8000594:	480c      	ldr	r0, [pc, #48]	; (80005c8 <MX_TIM2_Init+0x94>)
 8000596:	f002 faa7 	bl	8002ae8 <HAL_TIM_ConfigClockSource>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80005a0:	f000 f87a 	bl	8000698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005a4:	2300      	movs	r3, #0
 80005a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	4805      	ldr	r0, [pc, #20]	; (80005c8 <MX_TIM2_Init+0x94>)
 80005b2:	f002 fc73 	bl	8002e9c <HAL_TIMEx_MasterConfigSynchronization>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80005bc:	f000 f86c 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000140 	.word	0x20000140

080005cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005d2:	4a12      	ldr	r2, [pc, #72]	; (800061c <MX_USART2_UART_Init+0x50>)
 80005d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005f2:	220c      	movs	r2, #12
 80005f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 8000604:	f002 fcb4 	bl	8002f70 <HAL_UART_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800060e:	f000 f843 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000188 	.word	0x20000188
 800061c:	40004400 	.word	0x40004400

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_GPIO_Init+0x5c>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a10      	ldr	r2, [pc, #64]	; (800067c <MX_GPIO_Init+0x5c>)
 800063a:	f043 0304 	orr.w	r3, r3, #4
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_GPIO_Init+0x5c>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f003 0304 	and.w	r3, r3, #4
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2120      	movs	r1, #32
 8000650:	480b      	ldr	r0, [pc, #44]	; (8000680 <MX_GPIO_Init+0x60>)
 8000652:	f001 fb91 	bl	8001d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000656:	2320      	movs	r3, #32
 8000658:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2302      	movs	r3, #2
 8000664:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000666:	f107 0308 	add.w	r3, r7, #8
 800066a:	4619      	mov	r1, r3
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_GPIO_Init+0x60>)
 800066e:	f001 fa07 	bl	8001a80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000672:	bf00      	nop
 8000674:	3718      	adds	r7, #24
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40021000 	.word	0x40021000
 8000680:	40010800 	.word	0x40010800

08000684 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	SCH_Update();
 800068c:	f000 f850 	bl	8000730 <SCH_Update>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <Error_Handler+0x8>
	...

080006a4 <SCH_Init>:
// The array of tasks
static sTask SCH_tasks_G[SCH_MAX_TASKS];

int tasks_num = 0; //number of current tasks

void SCH_Init(void){
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < SCH_MAX_TASKS; i++){
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	e033      	b.n	8000718 <SCH_Init+0x74>
		SCH_tasks_G[i].pTask = 0x0000;
 80006b0:	491e      	ldr	r1, [pc, #120]	; (800072c <SCH_Init+0x88>)
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	4613      	mov	r3, r2
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	4413      	add	r3, r2
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	440b      	add	r3, r1
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].Delay = 0;
 80006c2:	491a      	ldr	r1, [pc, #104]	; (800072c <SCH_Init+0x88>)
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	4613      	mov	r3, r2
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	4413      	add	r3, r2
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	440b      	add	r3, r1
 80006d0:	3304      	adds	r3, #4
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].Period = 0;
 80006d6:	4915      	ldr	r1, [pc, #84]	; (800072c <SCH_Init+0x88>)
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	4613      	mov	r3, r2
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	4413      	add	r3, r2
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	440b      	add	r3, r1
 80006e4:	3308      	adds	r3, #8
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].RunMe = 0;
 80006ea:	4910      	ldr	r1, [pc, #64]	; (800072c <SCH_Init+0x88>)
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	4613      	mov	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	440b      	add	r3, r1
 80006f8:	330c      	adds	r3, #12
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[i].TaskID = i;
 80006fe:	490b      	ldr	r1, [pc, #44]	; (800072c <SCH_Init+0x88>)
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	4613      	mov	r3, r2
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	4413      	add	r3, r2
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	440b      	add	r3, r1
 800070c:	3310      	adds	r3, #16
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	601a      	str	r2, [r3, #0]
	for(uint32_t i = 0; i < SCH_MAX_TASKS; i++){
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	3301      	adds	r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b09      	cmp	r3, #9
 800071c:	d9c8      	bls.n	80006b0 <SCH_Init+0xc>
	}
}
 800071e:	bf00      	nop
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	200001d0 	.word	0x200001d0

08000730 <SCH_Update>:

void SCH_Update(void){
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
	// Check if there is a task at this location
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <SCH_Update+0x3c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d013      	beq.n	8000764 <SCH_Update+0x34>
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <SCH_Update+0x3c>)
 800073e:	7b1b      	ldrb	r3, [r3, #12]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d10f      	bne.n	8000764 <SCH_Update+0x34>
		if(SCH_tasks_G[0].Delay > 0){
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <SCH_Update+0x3c>)
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d004      	beq.n	8000756 <SCH_Update+0x26>
			SCH_tasks_G[0].Delay = SCH_tasks_G[0].Delay - 1;
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <SCH_Update+0x3c>)
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	3b01      	subs	r3, #1
 8000752:	4a06      	ldr	r2, [pc, #24]	; (800076c <SCH_Update+0x3c>)
 8000754:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 8000756:	4b05      	ldr	r3, [pc, #20]	; (800076c <SCH_Update+0x3c>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d102      	bne.n	8000764 <SCH_Update+0x34>
			SCH_tasks_G[0].RunMe = 1;
 800075e:	4b03      	ldr	r3, [pc, #12]	; (800076c <SCH_Update+0x3c>)
 8000760:	2201      	movs	r2, #1
 8000762:	731a      	strb	r2, [r3, #12]
		}
	}
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	200001d0 	.word	0x200001d0

08000770 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8000770:	b480      	push	{r7}
 8000772:	b089      	sub	sp, #36	; 0x24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
	uint32_t sumDelay = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
	uint32_t newDelay = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]

	for(uint32_t i = 0; i < SCH_MAX_TASKS; i++){
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
 8000788:	e147      	b.n	8000a1a <SCH_Add_Task+0x2aa>
		if(SCH_tasks_G[i].pTask == 0x0000){
 800078a:	49a9      	ldr	r1, [pc, #676]	; (8000a30 <SCH_Add_Task+0x2c0>)
 800078c:	69ba      	ldr	r2, [r7, #24]
 800078e:	4613      	mov	r3, r2
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	4413      	add	r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	440b      	add	r3, r1
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d14e      	bne.n	800083c <SCH_Add_Task+0xcc>
			SCH_tasks_G[i].pTask = pFunction;
 800079e:	49a4      	ldr	r1, [pc, #656]	; (8000a30 <SCH_Add_Task+0x2c0>)
 80007a0:	69ba      	ldr	r2, [r7, #24]
 80007a2:	4613      	mov	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	440b      	add	r3, r1
 80007ac:	68fa      	ldr	r2, [r7, #12]
 80007ae:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[i].Delay = DELAY - sumDelay;
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	1ad1      	subs	r1, r2, r3
 80007b6:	489e      	ldr	r0, [pc, #632]	; (8000a30 <SCH_Add_Task+0x2c0>)
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	4613      	mov	r3, r2
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	4413      	add	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	4403      	add	r3, r0
 80007c4:	3304      	adds	r3, #4
 80007c6:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].Period = PERIOD;
 80007c8:	4999      	ldr	r1, [pc, #612]	; (8000a30 <SCH_Add_Task+0x2c0>)
 80007ca:	69ba      	ldr	r2, [r7, #24]
 80007cc:	4613      	mov	r3, r2
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	4413      	add	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	440b      	add	r3, r1
 80007d6:	3308      	adds	r3, #8
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[i].TaskID = i;
 80007dc:	4994      	ldr	r1, [pc, #592]	; (8000a30 <SCH_Add_Task+0x2c0>)
 80007de:	69ba      	ldr	r2, [r7, #24]
 80007e0:	4613      	mov	r3, r2
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	440b      	add	r3, r1
 80007ea:	3310      	adds	r3, #16
 80007ec:	69ba      	ldr	r2, [r7, #24]
 80007ee:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[i].RunMe = 0;
 80007f0:	498f      	ldr	r1, [pc, #572]	; (8000a30 <SCH_Add_Task+0x2c0>)
 80007f2:	69ba      	ldr	r2, [r7, #24]
 80007f4:	4613      	mov	r3, r2
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	4413      	add	r3, r2
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	440b      	add	r3, r1
 80007fe:	330c      	adds	r3, #12
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
			if(DELAY == 0){
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d109      	bne.n	800081e <SCH_Add_Task+0xae>
				SCH_tasks_G[i].RunMe = 1;
 800080a:	4989      	ldr	r1, [pc, #548]	; (8000a30 <SCH_Add_Task+0x2c0>)
 800080c:	69ba      	ldr	r2, [r7, #24]
 800080e:	4613      	mov	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	4413      	add	r3, r2
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	440b      	add	r3, r1
 8000818:	330c      	adds	r3, #12
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
			}
			tasks_num++;
 800081e:	4b85      	ldr	r3, [pc, #532]	; (8000a34 <SCH_Add_Task+0x2c4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	3301      	adds	r3, #1
 8000824:	4a83      	ldr	r2, [pc, #524]	; (8000a34 <SCH_Add_Task+0x2c4>)
 8000826:	6013      	str	r3, [r2, #0]
			return SCH_tasks_G[i].TaskID;
 8000828:	4981      	ldr	r1, [pc, #516]	; (8000a30 <SCH_Add_Task+0x2c0>)
 800082a:	69ba      	ldr	r2, [r7, #24]
 800082c:	4613      	mov	r3, r2
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4413      	add	r3, r2
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	440b      	add	r3, r1
 8000836:	3310      	adds	r3, #16
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	e0f4      	b.n	8000a26 <SCH_Add_Task+0x2b6>
		}
		else{
			if(DELAY < sumDelay + SCH_tasks_G[i].Delay){
 800083c:	497c      	ldr	r1, [pc, #496]	; (8000a30 <SCH_Add_Task+0x2c0>)
 800083e:	69ba      	ldr	r2, [r7, #24]
 8000840:	4613      	mov	r3, r2
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	4413      	add	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	440b      	add	r3, r1
 800084a:	3304      	adds	r3, #4
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	4413      	add	r3, r2
 8000852:	68ba      	ldr	r2, [r7, #8]
 8000854:	429a      	cmp	r2, r3
 8000856:	f080 80d1 	bcs.w	80009fc <SCH_Add_Task+0x28c>
				newDelay = DELAY - sumDelay;
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	613b      	str	r3, [r7, #16]
				SCH_tasks_G[i].Delay = SCH_tasks_G[i].Delay - newDelay;
 8000862:	4973      	ldr	r1, [pc, #460]	; (8000a30 <SCH_Add_Task+0x2c0>)
 8000864:	69ba      	ldr	r2, [r7, #24]
 8000866:	4613      	mov	r3, r2
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	4413      	add	r3, r2
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	440b      	add	r3, r1
 8000870:	3304      	adds	r3, #4
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	1ad1      	subs	r1, r2, r3
 8000878:	486d      	ldr	r0, [pc, #436]	; (8000a30 <SCH_Add_Task+0x2c0>)
 800087a:	69ba      	ldr	r2, [r7, #24]
 800087c:	4613      	mov	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	4413      	add	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4403      	add	r3, r0
 8000886:	3304      	adds	r3, #4
 8000888:	6019      	str	r1, [r3, #0]
				for(uint32_t j = tasks_num; j > i; j--){
 800088a:	4b6a      	ldr	r3, [pc, #424]	; (8000a34 <SCH_Add_Task+0x2c4>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	e061      	b.n	8000956 <SCH_Add_Task+0x1e6>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j-1].pTask;
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	1e5a      	subs	r2, r3, #1
 8000896:	4966      	ldr	r1, [pc, #408]	; (8000a30 <SCH_Add_Task+0x2c0>)
 8000898:	4613      	mov	r3, r2
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	4413      	add	r3, r2
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	440b      	add	r3, r1
 80008a2:	6819      	ldr	r1, [r3, #0]
 80008a4:	4862      	ldr	r0, [pc, #392]	; (8000a30 <SCH_Add_Task+0x2c0>)
 80008a6:	697a      	ldr	r2, [r7, #20]
 80008a8:	4613      	mov	r3, r2
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	4413      	add	r3, r2
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	4403      	add	r3, r0
 80008b2:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Delay = SCH_tasks_G[j-1].Delay;
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	1e5a      	subs	r2, r3, #1
 80008b8:	495d      	ldr	r1, [pc, #372]	; (8000a30 <SCH_Add_Task+0x2c0>)
 80008ba:	4613      	mov	r3, r2
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	4413      	add	r3, r2
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	440b      	add	r3, r1
 80008c4:	3304      	adds	r3, #4
 80008c6:	6819      	ldr	r1, [r3, #0]
 80008c8:	4859      	ldr	r0, [pc, #356]	; (8000a30 <SCH_Add_Task+0x2c0>)
 80008ca:	697a      	ldr	r2, [r7, #20]
 80008cc:	4613      	mov	r3, r2
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	4413      	add	r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	4403      	add	r3, r0
 80008d6:	3304      	adds	r3, #4
 80008d8:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Period = SCH_tasks_G[j-1].Period;
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	1e5a      	subs	r2, r3, #1
 80008de:	4954      	ldr	r1, [pc, #336]	; (8000a30 <SCH_Add_Task+0x2c0>)
 80008e0:	4613      	mov	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	4413      	add	r3, r2
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	440b      	add	r3, r1
 80008ea:	3308      	adds	r3, #8
 80008ec:	6819      	ldr	r1, [r3, #0]
 80008ee:	4850      	ldr	r0, [pc, #320]	; (8000a30 <SCH_Add_Task+0x2c0>)
 80008f0:	697a      	ldr	r2, [r7, #20]
 80008f2:	4613      	mov	r3, r2
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4413      	add	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4403      	add	r3, r0
 80008fc:	3308      	adds	r3, #8
 80008fe:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j-1].RunMe;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	1e5a      	subs	r2, r3, #1
 8000904:	494a      	ldr	r1, [pc, #296]	; (8000a30 <SCH_Add_Task+0x2c0>)
 8000906:	4613      	mov	r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4413      	add	r3, r2
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	440b      	add	r3, r1
 8000910:	330c      	adds	r3, #12
 8000912:	7818      	ldrb	r0, [r3, #0]
 8000914:	4946      	ldr	r1, [pc, #280]	; (8000a30 <SCH_Add_Task+0x2c0>)
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	4613      	mov	r3, r2
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	4413      	add	r3, r2
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	440b      	add	r3, r1
 8000922:	330c      	adds	r3, #12
 8000924:	4602      	mov	r2, r0
 8000926:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j-1].TaskID + 1;
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	1e5a      	subs	r2, r3, #1
 800092c:	4940      	ldr	r1, [pc, #256]	; (8000a30 <SCH_Add_Task+0x2c0>)
 800092e:	4613      	mov	r3, r2
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	4413      	add	r3, r2
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	440b      	add	r3, r1
 8000938:	3310      	adds	r3, #16
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	1c59      	adds	r1, r3, #1
 800093e:	483c      	ldr	r0, [pc, #240]	; (8000a30 <SCH_Add_Task+0x2c0>)
 8000940:	697a      	ldr	r2, [r7, #20]
 8000942:	4613      	mov	r3, r2
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	4413      	add	r3, r2
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	4403      	add	r3, r0
 800094c:	3310      	adds	r3, #16
 800094e:	6019      	str	r1, [r3, #0]
				for(uint32_t j = tasks_num; j > i; j--){
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	3b01      	subs	r3, #1
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	429a      	cmp	r2, r3
 800095c:	d899      	bhi.n	8000892 <SCH_Add_Task+0x122>
				}
	            SCH_tasks_G[i].pTask = pFunction;
 800095e:	4934      	ldr	r1, [pc, #208]	; (8000a30 <SCH_Add_Task+0x2c0>)
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	4613      	mov	r3, r2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	4413      	add	r3, r2
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	440b      	add	r3, r1
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	601a      	str	r2, [r3, #0]
	            SCH_tasks_G[i].Delay = DELAY - sumDelay;
 8000970:	68ba      	ldr	r2, [r7, #8]
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	1ad1      	subs	r1, r2, r3
 8000976:	482e      	ldr	r0, [pc, #184]	; (8000a30 <SCH_Add_Task+0x2c0>)
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	4613      	mov	r3, r2
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	4413      	add	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4403      	add	r3, r0
 8000984:	3304      	adds	r3, #4
 8000986:	6019      	str	r1, [r3, #0]
	            SCH_tasks_G[i].Period = PERIOD;
 8000988:	4929      	ldr	r1, [pc, #164]	; (8000a30 <SCH_Add_Task+0x2c0>)
 800098a:	69ba      	ldr	r2, [r7, #24]
 800098c:	4613      	mov	r3, r2
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	4413      	add	r3, r2
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	440b      	add	r3, r1
 8000996:	3308      	adds	r3, #8
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	601a      	str	r2, [r3, #0]
	            SCH_tasks_G[i].RunMe = 0;
 800099c:	4924      	ldr	r1, [pc, #144]	; (8000a30 <SCH_Add_Task+0x2c0>)
 800099e:	69ba      	ldr	r2, [r7, #24]
 80009a0:	4613      	mov	r3, r2
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4413      	add	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	440b      	add	r3, r1
 80009aa:	330c      	adds	r3, #12
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
	            if(DELAY == 0){
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d109      	bne.n	80009ca <SCH_Add_Task+0x25a>
	            	SCH_tasks_G[i].RunMe = 1;
 80009b6:	491e      	ldr	r1, [pc, #120]	; (8000a30 <SCH_Add_Task+0x2c0>)
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	4613      	mov	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	4413      	add	r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	440b      	add	r3, r1
 80009c4:	330c      	adds	r3, #12
 80009c6:	2201      	movs	r2, #1
 80009c8:	701a      	strb	r2, [r3, #0]
	            }
	            SCH_tasks_G[i].TaskID = i;
 80009ca:	4919      	ldr	r1, [pc, #100]	; (8000a30 <SCH_Add_Task+0x2c0>)
 80009cc:	69ba      	ldr	r2, [r7, #24]
 80009ce:	4613      	mov	r3, r2
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	4413      	add	r3, r2
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	440b      	add	r3, r1
 80009d8:	3310      	adds	r3, #16
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	601a      	str	r2, [r3, #0]
	            tasks_num++;
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <SCH_Add_Task+0x2c4>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	3301      	adds	r3, #1
 80009e4:	4a13      	ldr	r2, [pc, #76]	; (8000a34 <SCH_Add_Task+0x2c4>)
 80009e6:	6013      	str	r3, [r2, #0]
	            return SCH_tasks_G[i].TaskID;
 80009e8:	4911      	ldr	r1, [pc, #68]	; (8000a30 <SCH_Add_Task+0x2c0>)
 80009ea:	69ba      	ldr	r2, [r7, #24]
 80009ec:	4613      	mov	r3, r2
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	4413      	add	r3, r2
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	440b      	add	r3, r1
 80009f6:	3310      	adds	r3, #16
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	e014      	b.n	8000a26 <SCH_Add_Task+0x2b6>
			}
			else{
				sumDelay = sumDelay + SCH_tasks_G[i].Delay;
 80009fc:	490c      	ldr	r1, [pc, #48]	; (8000a30 <SCH_Add_Task+0x2c0>)
 80009fe:	69ba      	ldr	r2, [r7, #24]
 8000a00:	4613      	mov	r3, r2
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	4413      	add	r3, r2
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	440b      	add	r3, r1
 8000a0a:	3304      	adds	r3, #4
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	69fa      	ldr	r2, [r7, #28]
 8000a10:	4413      	add	r3, r2
 8000a12:	61fb      	str	r3, [r7, #28]
	for(uint32_t i = 0; i < SCH_MAX_TASKS; i++){
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	3301      	adds	r3, #1
 8000a18:	61bb      	str	r3, [r7, #24]
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	2b09      	cmp	r3, #9
 8000a1e:	f67f aeb4 	bls.w	800078a <SCH_Add_Task+0x1a>
			}
		}
	}
	return -1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3724      	adds	r7, #36	; 0x24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	200001d0 	.word	0x200001d0
 8000a34:	20000298 	.word	0x20000298

08000a38 <SCH_Delete_Task>:


uint8_t SCH_Delete_Task(uint32_t taskID){
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	uint8_t Return_code  = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	73fb      	strb	r3, [r7, #15]
	uint8_t j;
	if(taskID >= 0 && taskID < SCH_MAX_TASKS){
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2b09      	cmp	r3, #9
 8000a48:	f200 80ad 	bhi.w	8000ba6 <SCH_Delete_Task+0x16e>
		Return_code = 1;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	73fb      	strb	r3, [r7, #15]
		for(uint32_t i = taskID; i < tasks_num; i++){ //shift the tasks at the deleted task backward
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	e061      	b.n	8000b1a <SCH_Delete_Task+0xe2>
			SCH_tasks_G[i].pTask = SCH_tasks_G[i+1].pTask;
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	1c5a      	adds	r2, r3, #1
 8000a5a:	4956      	ldr	r1, [pc, #344]	; (8000bb4 <SCH_Delete_Task+0x17c>)
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	4413      	add	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	440b      	add	r3, r1
 8000a66:	6819      	ldr	r1, [r3, #0]
 8000a68:	4852      	ldr	r0, [pc, #328]	; (8000bb4 <SCH_Delete_Task+0x17c>)
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	4413      	add	r3, r2
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	4403      	add	r3, r0
 8000a76:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].Delay = SCH_tasks_G[i+1].Delay;
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	494d      	ldr	r1, [pc, #308]	; (8000bb4 <SCH_Delete_Task+0x17c>)
 8000a7e:	4613      	mov	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4413      	add	r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	440b      	add	r3, r1
 8000a88:	3304      	adds	r3, #4
 8000a8a:	6819      	ldr	r1, [r3, #0]
 8000a8c:	4849      	ldr	r0, [pc, #292]	; (8000bb4 <SCH_Delete_Task+0x17c>)
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	4613      	mov	r3, r2
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	4413      	add	r3, r2
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	4403      	add	r3, r0
 8000a9a:	3304      	adds	r3, #4
 8000a9c:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].Period = SCH_tasks_G[i+1].Period;
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	1c5a      	adds	r2, r3, #1
 8000aa2:	4944      	ldr	r1, [pc, #272]	; (8000bb4 <SCH_Delete_Task+0x17c>)
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	4413      	add	r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	440b      	add	r3, r1
 8000aae:	3308      	adds	r3, #8
 8000ab0:	6819      	ldr	r1, [r3, #0]
 8000ab2:	4840      	ldr	r0, [pc, #256]	; (8000bb4 <SCH_Delete_Task+0x17c>)
 8000ab4:	68ba      	ldr	r2, [r7, #8]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	4413      	add	r3, r2
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	4403      	add	r3, r0
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe = SCH_tasks_G[i+1].RunMe;
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	1c5a      	adds	r2, r3, #1
 8000ac8:	493a      	ldr	r1, [pc, #232]	; (8000bb4 <SCH_Delete_Task+0x17c>)
 8000aca:	4613      	mov	r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	4413      	add	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	330c      	adds	r3, #12
 8000ad6:	7818      	ldrb	r0, [r3, #0]
 8000ad8:	4936      	ldr	r1, [pc, #216]	; (8000bb4 <SCH_Delete_Task+0x17c>)
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	4613      	mov	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	4413      	add	r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	330c      	adds	r3, #12
 8000ae8:	4602      	mov	r2, r0
 8000aea:	701a      	strb	r2, [r3, #0]
			SCH_tasks_G[i].TaskID = SCH_tasks_G[i+1].TaskID - 1;
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	4930      	ldr	r1, [pc, #192]	; (8000bb4 <SCH_Delete_Task+0x17c>)
 8000af2:	4613      	mov	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	4413      	add	r3, r2
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	440b      	add	r3, r1
 8000afc:	3310      	adds	r3, #16
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	1e59      	subs	r1, r3, #1
 8000b02:	482c      	ldr	r0, [pc, #176]	; (8000bb4 <SCH_Delete_Task+0x17c>)
 8000b04:	68ba      	ldr	r2, [r7, #8]
 8000b06:	4613      	mov	r3, r2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	4413      	add	r3, r2
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	4403      	add	r3, r0
 8000b10:	3310      	adds	r3, #16
 8000b12:	6019      	str	r1, [r3, #0]
		for(uint32_t i = taskID; i < tasks_num; i++){ //shift the tasks at the deleted task backward
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	3301      	adds	r3, #1
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <SCH_Delete_Task+0x180>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d397      	bcc.n	8000a56 <SCH_Delete_Task+0x1e>
		}
		SCH_tasks_G[tasks_num - 1].pTask = 0;
 8000b26:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <SCH_Delete_Task+0x180>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	1e5a      	subs	r2, r3, #1
 8000b2c:	4921      	ldr	r1, [pc, #132]	; (8000bb4 <SCH_Delete_Task+0x17c>)
 8000b2e:	4613      	mov	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	4413      	add	r3, r2
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	440b      	add	r3, r1
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[tasks_num - 1].Delay = 0;
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <SCH_Delete_Task+0x180>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	1e5a      	subs	r2, r3, #1
 8000b42:	491c      	ldr	r1, [pc, #112]	; (8000bb4 <SCH_Delete_Task+0x17c>)
 8000b44:	4613      	mov	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	4413      	add	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	3304      	adds	r3, #4
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[tasks_num - 1].Period = 0;
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <SCH_Delete_Task+0x180>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	1e5a      	subs	r2, r3, #1
 8000b5a:	4916      	ldr	r1, [pc, #88]	; (8000bb4 <SCH_Delete_Task+0x17c>)
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	4413      	add	r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	440b      	add	r3, r1
 8000b66:	3308      	adds	r3, #8
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[tasks_num - 1].RunMe = 0;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <SCH_Delete_Task+0x180>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	1e5a      	subs	r2, r3, #1
 8000b72:	4910      	ldr	r1, [pc, #64]	; (8000bb4 <SCH_Delete_Task+0x17c>)
 8000b74:	4613      	mov	r3, r2
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	4413      	add	r3, r2
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	440b      	add	r3, r1
 8000b7e:	330c      	adds	r3, #12
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[tasks_num - 1].TaskID = 0;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <SCH_Delete_Task+0x180>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	1e5a      	subs	r2, r3, #1
 8000b8a:	490a      	ldr	r1, [pc, #40]	; (8000bb4 <SCH_Delete_Task+0x17c>)
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	4413      	add	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	440b      	add	r3, r1
 8000b96:	3310      	adds	r3, #16
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
		tasks_num--;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <SCH_Delete_Task+0x180>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <SCH_Delete_Task+0x180>)
 8000ba4:	6013      	str	r3, [r2, #0]
	}
	return Return_code; // return status
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	200001d0 	.word	0x200001d0
 8000bb8:	20000298 	.word	0x20000298

08000bbc <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8000bbc:	b5b0      	push	{r4, r5, r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe > 0) {
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <SCH_Dispatch_Tasks+0x54>)
 8000bc4:	7b1b      	ldrb	r3, [r3, #12]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d019      	beq.n	8000bfe <SCH_Dispatch_Tasks+0x42>
		(*SCH_tasks_G[0].pTask)(); // Run the task
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <SCH_Dispatch_Tasks+0x54>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4798      	blx	r3
		SCH_tasks_G[0].RunMe = 0; // Reset / reduce RunMe flag
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <SCH_Dispatch_Tasks+0x54>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_G[0];
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <SCH_Dispatch_Tasks+0x54>)
 8000bd8:	1d3c      	adds	r4, r7, #4
 8000bda:	461d      	mov	r5, r3
 8000bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be0:	682b      	ldr	r3, [r5, #0]
 8000be2:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff26 	bl	8000a38 <SCH_Delete_Task>
		if (temtask.Period != 0) {
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d005      	beq.n	8000bfe <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	68f9      	ldr	r1, [r7, #12]
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fdb9 	bl	8000770 <SCH_Add_Task>
		}
	}
	// Enter low-power mode (Sleep mode). The MCU will wake up on the next interrupt
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000bfe:	2101      	movs	r1, #1
 8000c00:	2000      	movs	r0, #0
 8000c02:	f001 f8eb 	bl	8001ddc <HAL_PWR_EnterSLEEPMode>
}
 8000c06:	bf00      	nop
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200001d0 	.word	0x200001d0

08000c14 <setTimer>:
#include "software_timer.h"

int timer_counter[MAX_TIMERS] = {0};
int timer_flag[MAX_TIMERS] = {0};

void setTimer(int duration, int id){
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
	timer_counter[id] = duration/TICK;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a09      	ldr	r2, [pc, #36]	; (8000c48 <setTimer+0x34>)
 8000c22:	fb82 1203 	smull	r1, r2, r2, r3
 8000c26:	1092      	asrs	r2, r2, #2
 8000c28:	17db      	asrs	r3, r3, #31
 8000c2a:	1ad2      	subs	r2, r2, r3
 8000c2c:	4907      	ldr	r1, [pc, #28]	; (8000c4c <setTimer+0x38>)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[id] = 0;
 8000c34:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <setTimer+0x3c>)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	2100      	movs	r1, #0
 8000c3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	66666667 	.word	0x66666667
 8000c4c:	2000029c 	.word	0x2000029c
 8000c50:	200002b4 	.word	0x200002b4

08000c54 <timerRun>:
void timerRun(){
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_TIMERS; i++){
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	e01c      	b.n	8000c9a <timerRun+0x46>
		if(timer_counter[i] > 0){
 8000c60:	4a12      	ldr	r2, [pc, #72]	; (8000cac <timerRun+0x58>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	dd13      	ble.n	8000c94 <timerRun+0x40>
			timer_counter[i]--;
 8000c6c:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <timerRun+0x58>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c74:	1e5a      	subs	r2, r3, #1
 8000c76:	490d      	ldr	r1, [pc, #52]	; (8000cac <timerRun+0x58>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <timerRun+0x58>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	dc04      	bgt.n	8000c94 <timerRun+0x40>
				timer_flag[i] = 1;
 8000c8a:	4a09      	ldr	r2, [pc, #36]	; (8000cb0 <timerRun+0x5c>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2101      	movs	r1, #1
 8000c90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MAX_TIMERS; i++){
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3301      	adds	r3, #1
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b05      	cmp	r3, #5
 8000c9e:	dddf      	ble.n	8000c60 <timerRun+0xc>
			}
		}
	}
}
 8000ca0:	bf00      	nop
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	2000029c 	.word	0x2000029c
 8000cb0:	200002b4 	.word	0x200002b4

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <HAL_MspInit+0x40>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <HAL_MspInit+0x40>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6193      	str	r3, [r2, #24]
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <HAL_MspInit+0x40>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <HAL_MspInit+0x40>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <HAL_MspInit+0x40>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	61d3      	str	r3, [r2, #28]
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <HAL_MspInit+0x40>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	40021000 	.word	0x40021000

08000cf8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <HAL_ADC_MspInit+0x6c>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d121      	bne.n	8000d5c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <HAL_ADC_MspInit+0x70>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <HAL_ADC_MspInit+0x70>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_ADC_MspInit+0x70>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_ADC_MspInit+0x70>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a0c      	ldr	r2, [pc, #48]	; (8000d68 <HAL_ADC_MspInit+0x70>)
 8000d36:	f043 0304 	orr.w	r3, r3, #4
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <HAL_ADC_MspInit+0x70>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0304 	and.w	r3, r3, #4
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	4619      	mov	r1, r3
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <HAL_ADC_MspInit+0x74>)
 8000d58:	f000 fe92 	bl	8001a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d5c:	bf00      	nop
 8000d5e:	3720      	adds	r7, #32
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40012400 	.word	0x40012400
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40010800 	.word	0x40010800

08000d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d80:	d113      	bne.n	8000daa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <HAL_TIM_Base_MspInit+0x44>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <HAL_TIM_Base_MspInit+0x44>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	61d3      	str	r3, [r2, #28]
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_TIM_Base_MspInit+0x44>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	201c      	movs	r0, #28
 8000da0:	f000 fd85 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000da4:	201c      	movs	r0, #28
 8000da6:	f000 fd9e 	bl	80018e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000

08000db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a1f      	ldr	r2, [pc, #124]	; (8000e50 <HAL_UART_MspInit+0x98>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d137      	bne.n	8000e48 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd8:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <HAL_UART_MspInit+0x9c>)
 8000dda:	69db      	ldr	r3, [r3, #28]
 8000ddc:	4a1d      	ldr	r2, [pc, #116]	; (8000e54 <HAL_UART_MspInit+0x9c>)
 8000dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de2:	61d3      	str	r3, [r2, #28]
 8000de4:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <HAL_UART_MspInit+0x9c>)
 8000de6:	69db      	ldr	r3, [r3, #28]
 8000de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <HAL_UART_MspInit+0x9c>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <HAL_UART_MspInit+0x9c>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <HAL_UART_MspInit+0x9c>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e08:	2304      	movs	r3, #4
 8000e0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480f      	ldr	r0, [pc, #60]	; (8000e58 <HAL_UART_MspInit+0xa0>)
 8000e1c:	f000 fe30 	bl	8001a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e20:	2308      	movs	r3, #8
 8000e22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	4619      	mov	r1, r3
 8000e32:	4809      	ldr	r0, [pc, #36]	; (8000e58 <HAL_UART_MspInit+0xa0>)
 8000e34:	f000 fe24 	bl	8001a80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2026      	movs	r0, #38	; 0x26
 8000e3e:	f000 fd36 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e42:	2026      	movs	r0, #38	; 0x26
 8000e44:	f000 fd4f 	bl	80018e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e48:	bf00      	nop
 8000e4a:	3720      	adds	r7, #32
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40004400 	.word	0x40004400
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010800 	.word	0x40010800

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <NMI_Handler+0x4>

08000e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <HardFault_Handler+0x4>

08000e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <MemManage_Handler+0x4>

08000e6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <BusFault_Handler+0x4>

08000e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <UsageFault_Handler+0x4>

08000e7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr

08000e86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr

08000e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr

08000e9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea2:	f000 f8bf 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <TIM2_IRQHandler+0x10>)
 8000eb2:	f001 fd11 	bl	80028d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000140 	.word	0x20000140

08000ec0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <USART2_IRQHandler+0x10>)
 8000ec6:	f002 f94b 	bl	8003160 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000188 	.word	0x20000188

08000ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000edc:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <_sbrk+0x5c>)
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <_sbrk+0x60>)
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d102      	bne.n	8000ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <_sbrk+0x64>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <_sbrk+0x68>)
 8000ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d207      	bcs.n	8000f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f04:	f002 fed4 	bl	8003cb0 <__errno>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	e009      	b.n	8000f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <_sbrk+0x64>)
 8000f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f26:	68fb      	ldr	r3, [r7, #12]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20002800 	.word	0x20002800
 8000f34:	00000400 	.word	0x00000400
 8000f38:	200002cc 	.word	0x200002cc
 8000f3c:	20000420 	.word	0x20000420

08000f40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f4c:	f7ff fff8 	bl	8000f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f50:	480b      	ldr	r0, [pc, #44]	; (8000f80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f52:	490c      	ldr	r1, [pc, #48]	; (8000f84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f54:	4a0c      	ldr	r2, [pc, #48]	; (8000f88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a09      	ldr	r2, [pc, #36]	; (8000f8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f68:	4c09      	ldr	r4, [pc, #36]	; (8000f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f76:	f002 fea1 	bl	8003cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f7a:	f7ff fa11 	bl	80003a0 <main>
  bx lr
 8000f7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f88:	08004658 	.word	0x08004658
  ldr r2, =_sbss
 8000f8c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f90:	2000041c 	.word	0x2000041c

08000f94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC1_2_IRQHandler>
	...

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HAL_Init+0x28>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <HAL_Init+0x28>)
 8000fa2:	f043 0310 	orr.w	r3, r3, #16
 8000fa6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 fc75 	bl	8001898 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fae:	200f      	movs	r0, #15
 8000fb0:	f000 f808 	bl	8000fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb4:	f7ff fe7e 	bl	8000cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40022000 	.word	0x40022000

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x54>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_InitTick+0x58>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 fc8d 	bl	8001902 <HAL_SYSTICK_Config>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00e      	b.n	8001010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d80a      	bhi.n	800100e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f000 fc55 	bl	80018ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_InitTick+0x5c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000000 	.word	0x20000000
 800101c:	20000008 	.word	0x20000008
 8001020:	20000004 	.word	0x20000004

08001024 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <HAL_IncTick+0x1c>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b05      	ldr	r3, [pc, #20]	; (8001044 <HAL_IncTick+0x20>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a03      	ldr	r2, [pc, #12]	; (8001044 <HAL_IncTick+0x20>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	20000008 	.word	0x20000008
 8001044:	200002d0 	.word	0x200002d0

08001048 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b02      	ldr	r3, [pc, #8]	; (8001058 <HAL_GetTick+0x10>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	200002d0 	.word	0x200002d0

0800105c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001064:	2300      	movs	r3, #0
 8001066:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001068:	2300      	movs	r3, #0
 800106a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800106c:	2300      	movs	r3, #0
 800106e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e0be      	b.n	80011fc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	2b00      	cmp	r3, #0
 800108a:	d109      	bne.n	80010a0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff fe2c 	bl	8000cf8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 faeb 	bl	800167c <ADC_ConversionStop_Disable>
 80010a6:	4603      	mov	r3, r0
 80010a8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ae:	f003 0310 	and.w	r3, r3, #16
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f040 8099 	bne.w	80011ea <HAL_ADC_Init+0x18e>
 80010b8:	7dfb      	ldrb	r3, [r7, #23]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f040 8095 	bne.w	80011ea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010c8:	f023 0302 	bic.w	r3, r3, #2
 80010cc:	f043 0202 	orr.w	r2, r3, #2
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010dc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	7b1b      	ldrb	r3, [r3, #12]
 80010e2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010e4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010f4:	d003      	beq.n	80010fe <HAL_ADC_Init+0xa2>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d102      	bne.n	8001104 <HAL_ADC_Init+0xa8>
 80010fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001102:	e000      	b.n	8001106 <HAL_ADC_Init+0xaa>
 8001104:	2300      	movs	r3, #0
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7d1b      	ldrb	r3, [r3, #20]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d119      	bne.n	8001148 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	7b1b      	ldrb	r3, [r3, #12]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d109      	bne.n	8001130 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	3b01      	subs	r3, #1
 8001122:	035a      	lsls	r2, r3, #13
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	e00b      	b.n	8001148 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001134:	f043 0220 	orr.w	r2, r3, #32
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001140:	f043 0201 	orr.w	r2, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	430a      	orrs	r2, r1
 800115a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	4b28      	ldr	r3, [pc, #160]	; (8001204 <HAL_ADC_Init+0x1a8>)
 8001164:	4013      	ands	r3, r2
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6812      	ldr	r2, [r2, #0]
 800116a:	68b9      	ldr	r1, [r7, #8]
 800116c:	430b      	orrs	r3, r1
 800116e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001178:	d003      	beq.n	8001182 <HAL_ADC_Init+0x126>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d104      	bne.n	800118c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	3b01      	subs	r3, #1
 8001188:	051b      	lsls	r3, r3, #20
 800118a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001192:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	430a      	orrs	r2, r1
 800119e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_ADC_Init+0x1ac>)
 80011a8:	4013      	ands	r3, r2
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d10b      	bne.n	80011c8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ba:	f023 0303 	bic.w	r3, r3, #3
 80011be:	f043 0201 	orr.w	r2, r3, #1
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011c6:	e018      	b.n	80011fa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011cc:	f023 0312 	bic.w	r3, r3, #18
 80011d0:	f043 0210 	orr.w	r2, r3, #16
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011dc:	f043 0201 	orr.w	r2, r3, #1
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011e8:	e007      	b.n	80011fa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ee:	f043 0210 	orr.w	r2, r3, #16
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	ffe1f7fd 	.word	0xffe1f7fd
 8001208:	ff1f0efe 	.word	0xff1f0efe

0800120c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800121e:	2b01      	cmp	r3, #1
 8001220:	d101      	bne.n	8001226 <HAL_ADC_Start+0x1a>
 8001222:	2302      	movs	r3, #2
 8001224:	e098      	b.n	8001358 <HAL_ADC_Start+0x14c>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 f9ca 	bl	80015c8 <ADC_Enable>
 8001234:	4603      	mov	r3, r0
 8001236:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f040 8087 	bne.w	800134e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001248:	f023 0301 	bic.w	r3, r3, #1
 800124c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a41      	ldr	r2, [pc, #260]	; (8001360 <HAL_ADC_Start+0x154>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d105      	bne.n	800126a <HAL_ADC_Start+0x5e>
 800125e:	4b41      	ldr	r3, [pc, #260]	; (8001364 <HAL_ADC_Start+0x158>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d115      	bne.n	8001296 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001280:	2b00      	cmp	r3, #0
 8001282:	d026      	beq.n	80012d2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001288:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800128c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001294:	e01d      	b.n	80012d2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a2f      	ldr	r2, [pc, #188]	; (8001364 <HAL_ADC_Start+0x158>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d004      	beq.n	80012b6 <HAL_ADC_Start+0xaa>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a2b      	ldr	r2, [pc, #172]	; (8001360 <HAL_ADC_Start+0x154>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d10d      	bne.n	80012d2 <HAL_ADC_Start+0xc6>
 80012b6:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <HAL_ADC_Start+0x158>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d007      	beq.n	80012d2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d006      	beq.n	80012ec <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e2:	f023 0206 	bic.w	r2, r3, #6
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80012ea:	e002      	b.n	80012f2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f06f 0202 	mvn.w	r2, #2
 8001302:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800130e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001312:	d113      	bne.n	800133c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001318:	4a11      	ldr	r2, [pc, #68]	; (8001360 <HAL_ADC_Start+0x154>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d105      	bne.n	800132a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <HAL_ADC_Start+0x158>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001326:	2b00      	cmp	r3, #0
 8001328:	d108      	bne.n	800133c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	e00c      	b.n	8001356 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	e003      	b.n	8001356 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40012800 	.word	0x40012800
 8001364:	40012400 	.word	0x40012400

08001368 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800137a:	2b01      	cmp	r3, #1
 800137c:	d101      	bne.n	8001382 <HAL_ADC_Stop+0x1a>
 800137e:	2302      	movs	r3, #2
 8001380:	e01a      	b.n	80013b8 <HAL_ADC_Stop+0x50>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f976 	bl	800167c <ADC_ConversionStop_Disable>
 8001390:	4603      	mov	r3, r0
 8001392:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d109      	bne.n	80013ae <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013a2:	f023 0301 	bic.w	r3, r3, #1
 80013a6:	f043 0201 	orr.w	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d101      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x20>
 80013f4:	2302      	movs	r3, #2
 80013f6:	e0dc      	b.n	80015b2 <HAL_ADC_ConfigChannel+0x1da>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b06      	cmp	r3, #6
 8001406:	d81c      	bhi.n	8001442 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	3b05      	subs	r3, #5
 800141a:	221f      	movs	r2, #31
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	4019      	ands	r1, r3
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	6818      	ldr	r0, [r3, #0]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	3b05      	subs	r3, #5
 8001434:	fa00 f203 	lsl.w	r2, r0, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	635a      	str	r2, [r3, #52]	; 0x34
 8001440:	e03c      	b.n	80014bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b0c      	cmp	r3, #12
 8001448:	d81c      	bhi.n	8001484 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	3b23      	subs	r3, #35	; 0x23
 800145c:	221f      	movs	r2, #31
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	4019      	ands	r1, r3
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	3b23      	subs	r3, #35	; 0x23
 8001476:	fa00 f203 	lsl.w	r2, r0, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	631a      	str	r2, [r3, #48]	; 0x30
 8001482:	e01b      	b.n	80014bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	3b41      	subs	r3, #65	; 0x41
 8001496:	221f      	movs	r2, #31
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	4019      	ands	r1, r3
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	4613      	mov	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	3b41      	subs	r3, #65	; 0x41
 80014b0:	fa00 f203 	lsl.w	r2, r0, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b09      	cmp	r3, #9
 80014c2:	d91c      	bls.n	80014fe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68d9      	ldr	r1, [r3, #12]
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4613      	mov	r3, r2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4413      	add	r3, r2
 80014d4:	3b1e      	subs	r3, #30
 80014d6:	2207      	movs	r2, #7
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	4019      	ands	r1, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	6898      	ldr	r0, [r3, #8]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4613      	mov	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4413      	add	r3, r2
 80014ee:	3b1e      	subs	r3, #30
 80014f0:	fa00 f203 	lsl.w	r2, r0, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	e019      	b.n	8001532 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6919      	ldr	r1, [r3, #16]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	2207      	movs	r2, #7
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	4019      	ands	r1, r3
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	6898      	ldr	r0, [r3, #8]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4613      	mov	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4413      	add	r3, r2
 8001526:	fa00 f203 	lsl.w	r2, r0, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b10      	cmp	r3, #16
 8001538:	d003      	beq.n	8001542 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800153e:	2b11      	cmp	r3, #17
 8001540:	d132      	bne.n	80015a8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a1d      	ldr	r2, [pc, #116]	; (80015bc <HAL_ADC_ConfigChannel+0x1e4>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d125      	bne.n	8001598 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d126      	bne.n	80015a8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001568:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b10      	cmp	r3, #16
 8001570:	d11a      	bne.n	80015a8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001572:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001578:	fba2 2303 	umull	r2, r3, r2, r3
 800157c:	0c9a      	lsrs	r2, r3, #18
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001588:	e002      	b.n	8001590 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	3b01      	subs	r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f9      	bne.n	800158a <HAL_ADC_ConfigChannel+0x1b2>
 8001596:	e007      	b.n	80015a8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159c:	f043 0220 	orr.w	r2, r3, #32
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	40012400 	.word	0x40012400
 80015c0:	20000000 	.word	0x20000000
 80015c4:	431bde83 	.word	0x431bde83

080015c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d040      	beq.n	8001668 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f042 0201 	orr.w	r2, r2, #1
 80015f4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015f6:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <ADC_Enable+0xac>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a1f      	ldr	r2, [pc, #124]	; (8001678 <ADC_Enable+0xb0>)
 80015fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001600:	0c9b      	lsrs	r3, r3, #18
 8001602:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001604:	e002      	b.n	800160c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	3b01      	subs	r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f9      	bne.n	8001606 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001612:	f7ff fd19 	bl	8001048 <HAL_GetTick>
 8001616:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001618:	e01f      	b.n	800165a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800161a:	f7ff fd15 	bl	8001048 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d918      	bls.n	800165a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b01      	cmp	r3, #1
 8001634:	d011      	beq.n	800165a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163a:	f043 0210 	orr.w	r2, r3, #16
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001646:	f043 0201 	orr.w	r2, r3, #1
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e007      	b.n	800166a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b01      	cmp	r3, #1
 8001666:	d1d8      	bne.n	800161a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000000 	.word	0x20000000
 8001678:	431bde83 	.word	0x431bde83

0800167c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b01      	cmp	r3, #1
 8001694:	d12e      	bne.n	80016f4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0201 	bic.w	r2, r2, #1
 80016a4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016a6:	f7ff fccf 	bl	8001048 <HAL_GetTick>
 80016aa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016ac:	e01b      	b.n	80016e6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016ae:	f7ff fccb 	bl	8001048 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d914      	bls.n	80016e6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d10d      	bne.n	80016e6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ce:	f043 0210 	orr.w	r2, r3, #16
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	f043 0201 	orr.w	r2, r3, #1
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e007      	b.n	80016f6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d0dc      	beq.n	80016ae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <__NVIC_SetPriorityGrouping+0x44>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800171c:	4013      	ands	r3, r2
 800171e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800172c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001732:	4a04      	ldr	r2, [pc, #16]	; (8001744 <__NVIC_SetPriorityGrouping+0x44>)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	60d3      	str	r3, [r2, #12]
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <__NVIC_GetPriorityGrouping+0x18>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	f003 0307 	and.w	r3, r3, #7
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	2b00      	cmp	r3, #0
 8001774:	db0b      	blt.n	800178e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	f003 021f 	and.w	r2, r3, #31
 800177c:	4906      	ldr	r1, [pc, #24]	; (8001798 <__NVIC_EnableIRQ+0x34>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	2001      	movs	r0, #1
 8001786:	fa00 f202 	lsl.w	r2, r0, r2
 800178a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	e000e100 	.word	0xe000e100

0800179c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	db0a      	blt.n	80017c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	490c      	ldr	r1, [pc, #48]	; (80017e8 <__NVIC_SetPriority+0x4c>)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	0112      	lsls	r2, r2, #4
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	440b      	add	r3, r1
 80017c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c4:	e00a      	b.n	80017dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4908      	ldr	r1, [pc, #32]	; (80017ec <__NVIC_SetPriority+0x50>)
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	3b04      	subs	r3, #4
 80017d4:	0112      	lsls	r2, r2, #4
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	440b      	add	r3, r1
 80017da:	761a      	strb	r2, [r3, #24]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000e100 	.word	0xe000e100
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f1c3 0307 	rsb	r3, r3, #7
 800180a:	2b04      	cmp	r3, #4
 800180c:	bf28      	it	cs
 800180e:	2304      	movcs	r3, #4
 8001810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3304      	adds	r3, #4
 8001816:	2b06      	cmp	r3, #6
 8001818:	d902      	bls.n	8001820 <NVIC_EncodePriority+0x30>
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3b03      	subs	r3, #3
 800181e:	e000      	b.n	8001822 <NVIC_EncodePriority+0x32>
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	f04f 32ff 	mov.w	r2, #4294967295
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43da      	mvns	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	401a      	ands	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001838:	f04f 31ff 	mov.w	r1, #4294967295
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	43d9      	mvns	r1, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	4313      	orrs	r3, r2
         );
}
 800184a:	4618      	mov	r0, r3
 800184c:	3724      	adds	r7, #36	; 0x24
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001864:	d301      	bcc.n	800186a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001866:	2301      	movs	r3, #1
 8001868:	e00f      	b.n	800188a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186a:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <SysTick_Config+0x40>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001872:	210f      	movs	r1, #15
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f7ff ff90 	bl	800179c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <SysTick_Config+0x40>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001882:	4b04      	ldr	r3, [pc, #16]	; (8001894 <SysTick_Config+0x40>)
 8001884:	2207      	movs	r2, #7
 8001886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	e000e010 	.word	0xe000e010

08001898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ff2d 	bl	8001700 <__NVIC_SetPriorityGrouping>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c0:	f7ff ff42 	bl	8001748 <__NVIC_GetPriorityGrouping>
 80018c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	6978      	ldr	r0, [r7, #20]
 80018cc:	f7ff ff90 	bl	80017f0 <NVIC_EncodePriority>
 80018d0:	4602      	mov	r2, r0
 80018d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff5f 	bl	800179c <__NVIC_SetPriority>
}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff35 	bl	8001764 <__NVIC_EnableIRQ>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ffa2 	bl	8001854 <SysTick_Config>
 8001910:	4603      	mov	r3, r0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800191a:	b480      	push	{r7}
 800191c:	b085      	sub	sp, #20
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d008      	beq.n	8001944 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2204      	movs	r2, #4
 8001936:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e020      	b.n	8001986 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 020e 	bic.w	r2, r2, #14
 8001952:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0201 	bic.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196c:	2101      	movs	r1, #1
 800196e:	fa01 f202 	lsl.w	r2, r1, r2
 8001972:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001984:	7bfb      	ldrb	r3, [r7, #15]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d005      	beq.n	80019b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2204      	movs	r2, #4
 80019ac:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	73fb      	strb	r3, [r7, #15]
 80019b2:	e051      	b.n	8001a58 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 020e 	bic.w	r2, r2, #14
 80019c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0201 	bic.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a22      	ldr	r2, [pc, #136]	; (8001a64 <HAL_DMA_Abort_IT+0xd4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d029      	beq.n	8001a32 <HAL_DMA_Abort_IT+0xa2>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a21      	ldr	r2, [pc, #132]	; (8001a68 <HAL_DMA_Abort_IT+0xd8>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d022      	beq.n	8001a2e <HAL_DMA_Abort_IT+0x9e>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a1f      	ldr	r2, [pc, #124]	; (8001a6c <HAL_DMA_Abort_IT+0xdc>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d01a      	beq.n	8001a28 <HAL_DMA_Abort_IT+0x98>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a1e      	ldr	r2, [pc, #120]	; (8001a70 <HAL_DMA_Abort_IT+0xe0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d012      	beq.n	8001a22 <HAL_DMA_Abort_IT+0x92>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a1c      	ldr	r2, [pc, #112]	; (8001a74 <HAL_DMA_Abort_IT+0xe4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d00a      	beq.n	8001a1c <HAL_DMA_Abort_IT+0x8c>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a1b      	ldr	r2, [pc, #108]	; (8001a78 <HAL_DMA_Abort_IT+0xe8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d102      	bne.n	8001a16 <HAL_DMA_Abort_IT+0x86>
 8001a10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a14:	e00e      	b.n	8001a34 <HAL_DMA_Abort_IT+0xa4>
 8001a16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a1a:	e00b      	b.n	8001a34 <HAL_DMA_Abort_IT+0xa4>
 8001a1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a20:	e008      	b.n	8001a34 <HAL_DMA_Abort_IT+0xa4>
 8001a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a26:	e005      	b.n	8001a34 <HAL_DMA_Abort_IT+0xa4>
 8001a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a2c:	e002      	b.n	8001a34 <HAL_DMA_Abort_IT+0xa4>
 8001a2e:	2310      	movs	r3, #16
 8001a30:	e000      	b.n	8001a34 <HAL_DMA_Abort_IT+0xa4>
 8001a32:	2301      	movs	r3, #1
 8001a34:	4a11      	ldr	r2, [pc, #68]	; (8001a7c <HAL_DMA_Abort_IT+0xec>)
 8001a36:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	4798      	blx	r3
    } 
  }
  return status;
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40020008 	.word	0x40020008
 8001a68:	4002001c 	.word	0x4002001c
 8001a6c:	40020030 	.word	0x40020030
 8001a70:	40020044 	.word	0x40020044
 8001a74:	40020058 	.word	0x40020058
 8001a78:	4002006c 	.word	0x4002006c
 8001a7c:	40020000 	.word	0x40020000

08001a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b08b      	sub	sp, #44	; 0x2c
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a92:	e161      	b.n	8001d58 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a94:	2201      	movs	r2, #1
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	f040 8150 	bne.w	8001d52 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	4a97      	ldr	r2, [pc, #604]	; (8001d14 <HAL_GPIO_Init+0x294>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d05e      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
 8001abc:	4a95      	ldr	r2, [pc, #596]	; (8001d14 <HAL_GPIO_Init+0x294>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d875      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001ac2:	4a95      	ldr	r2, [pc, #596]	; (8001d18 <HAL_GPIO_Init+0x298>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d058      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
 8001ac8:	4a93      	ldr	r2, [pc, #588]	; (8001d18 <HAL_GPIO_Init+0x298>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d86f      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001ace:	4a93      	ldr	r2, [pc, #588]	; (8001d1c <HAL_GPIO_Init+0x29c>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d052      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
 8001ad4:	4a91      	ldr	r2, [pc, #580]	; (8001d1c <HAL_GPIO_Init+0x29c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d869      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001ada:	4a91      	ldr	r2, [pc, #580]	; (8001d20 <HAL_GPIO_Init+0x2a0>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d04c      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
 8001ae0:	4a8f      	ldr	r2, [pc, #572]	; (8001d20 <HAL_GPIO_Init+0x2a0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d863      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001ae6:	4a8f      	ldr	r2, [pc, #572]	; (8001d24 <HAL_GPIO_Init+0x2a4>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d046      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
 8001aec:	4a8d      	ldr	r2, [pc, #564]	; (8001d24 <HAL_GPIO_Init+0x2a4>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d85d      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001af2:	2b12      	cmp	r3, #18
 8001af4:	d82a      	bhi.n	8001b4c <HAL_GPIO_Init+0xcc>
 8001af6:	2b12      	cmp	r3, #18
 8001af8:	d859      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001afa:	a201      	add	r2, pc, #4	; (adr r2, 8001b00 <HAL_GPIO_Init+0x80>)
 8001afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b00:	08001b7b 	.word	0x08001b7b
 8001b04:	08001b55 	.word	0x08001b55
 8001b08:	08001b67 	.word	0x08001b67
 8001b0c:	08001ba9 	.word	0x08001ba9
 8001b10:	08001baf 	.word	0x08001baf
 8001b14:	08001baf 	.word	0x08001baf
 8001b18:	08001baf 	.word	0x08001baf
 8001b1c:	08001baf 	.word	0x08001baf
 8001b20:	08001baf 	.word	0x08001baf
 8001b24:	08001baf 	.word	0x08001baf
 8001b28:	08001baf 	.word	0x08001baf
 8001b2c:	08001baf 	.word	0x08001baf
 8001b30:	08001baf 	.word	0x08001baf
 8001b34:	08001baf 	.word	0x08001baf
 8001b38:	08001baf 	.word	0x08001baf
 8001b3c:	08001baf 	.word	0x08001baf
 8001b40:	08001baf 	.word	0x08001baf
 8001b44:	08001b5d 	.word	0x08001b5d
 8001b48:	08001b71 	.word	0x08001b71
 8001b4c:	4a76      	ldr	r2, [pc, #472]	; (8001d28 <HAL_GPIO_Init+0x2a8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d013      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b52:	e02c      	b.n	8001bae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	623b      	str	r3, [r7, #32]
          break;
 8001b5a:	e029      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	3304      	adds	r3, #4
 8001b62:	623b      	str	r3, [r7, #32]
          break;
 8001b64:	e024      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	3308      	adds	r3, #8
 8001b6c:	623b      	str	r3, [r7, #32]
          break;
 8001b6e:	e01f      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	330c      	adds	r3, #12
 8001b76:	623b      	str	r3, [r7, #32]
          break;
 8001b78:	e01a      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d102      	bne.n	8001b88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b82:	2304      	movs	r3, #4
 8001b84:	623b      	str	r3, [r7, #32]
          break;
 8001b86:	e013      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d105      	bne.n	8001b9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b90:	2308      	movs	r3, #8
 8001b92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	611a      	str	r2, [r3, #16]
          break;
 8001b9a:	e009      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b9c:	2308      	movs	r3, #8
 8001b9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69fa      	ldr	r2, [r7, #28]
 8001ba4:	615a      	str	r2, [r3, #20]
          break;
 8001ba6:	e003      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	623b      	str	r3, [r7, #32]
          break;
 8001bac:	e000      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          break;
 8001bae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	2bff      	cmp	r3, #255	; 0xff
 8001bb4:	d801      	bhi.n	8001bba <HAL_GPIO_Init+0x13a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	e001      	b.n	8001bbe <HAL_GPIO_Init+0x13e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	2bff      	cmp	r3, #255	; 0xff
 8001bc4:	d802      	bhi.n	8001bcc <HAL_GPIO_Init+0x14c>
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	e002      	b.n	8001bd2 <HAL_GPIO_Init+0x152>
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	3b08      	subs	r3, #8
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	210f      	movs	r1, #15
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	401a      	ands	r2, r3
 8001be4:	6a39      	ldr	r1, [r7, #32]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bec:	431a      	orrs	r2, r3
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 80a9 	beq.w	8001d52 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c00:	4b4a      	ldr	r3, [pc, #296]	; (8001d2c <HAL_GPIO_Init+0x2ac>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	4a49      	ldr	r2, [pc, #292]	; (8001d2c <HAL_GPIO_Init+0x2ac>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6193      	str	r3, [r2, #24]
 8001c0c:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <HAL_GPIO_Init+0x2ac>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c18:	4a45      	ldr	r2, [pc, #276]	; (8001d30 <HAL_GPIO_Init+0x2b0>)
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	089b      	lsrs	r3, r3, #2
 8001c1e:	3302      	adds	r3, #2
 8001c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	220f      	movs	r2, #15
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a3d      	ldr	r2, [pc, #244]	; (8001d34 <HAL_GPIO_Init+0x2b4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d00d      	beq.n	8001c60 <HAL_GPIO_Init+0x1e0>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a3c      	ldr	r2, [pc, #240]	; (8001d38 <HAL_GPIO_Init+0x2b8>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d007      	beq.n	8001c5c <HAL_GPIO_Init+0x1dc>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a3b      	ldr	r2, [pc, #236]	; (8001d3c <HAL_GPIO_Init+0x2bc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d101      	bne.n	8001c58 <HAL_GPIO_Init+0x1d8>
 8001c54:	2302      	movs	r3, #2
 8001c56:	e004      	b.n	8001c62 <HAL_GPIO_Init+0x1e2>
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e002      	b.n	8001c62 <HAL_GPIO_Init+0x1e2>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <HAL_GPIO_Init+0x1e2>
 8001c60:	2300      	movs	r3, #0
 8001c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c64:	f002 0203 	and.w	r2, r2, #3
 8001c68:	0092      	lsls	r2, r2, #2
 8001c6a:	4093      	lsls	r3, r2
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c72:	492f      	ldr	r1, [pc, #188]	; (8001d30 <HAL_GPIO_Init+0x2b0>)
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	089b      	lsrs	r3, r3, #2
 8001c78:	3302      	adds	r3, #2
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d006      	beq.n	8001c9a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c8c:	4b2c      	ldr	r3, [pc, #176]	; (8001d40 <HAL_GPIO_Init+0x2c0>)
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	492b      	ldr	r1, [pc, #172]	; (8001d40 <HAL_GPIO_Init+0x2c0>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	608b      	str	r3, [r1, #8]
 8001c98:	e006      	b.n	8001ca8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c9a:	4b29      	ldr	r3, [pc, #164]	; (8001d40 <HAL_GPIO_Init+0x2c0>)
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	4927      	ldr	r1, [pc, #156]	; (8001d40 <HAL_GPIO_Init+0x2c0>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d006      	beq.n	8001cc2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cb4:	4b22      	ldr	r3, [pc, #136]	; (8001d40 <HAL_GPIO_Init+0x2c0>)
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	4921      	ldr	r1, [pc, #132]	; (8001d40 <HAL_GPIO_Init+0x2c0>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	60cb      	str	r3, [r1, #12]
 8001cc0:	e006      	b.n	8001cd0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cc2:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <HAL_GPIO_Init+0x2c0>)
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	491d      	ldr	r1, [pc, #116]	; (8001d40 <HAL_GPIO_Init+0x2c0>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d006      	beq.n	8001cea <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cdc:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <HAL_GPIO_Init+0x2c0>)
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	4917      	ldr	r1, [pc, #92]	; (8001d40 <HAL_GPIO_Init+0x2c0>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
 8001ce8:	e006      	b.n	8001cf8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_GPIO_Init+0x2c0>)
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	4913      	ldr	r1, [pc, #76]	; (8001d40 <HAL_GPIO_Init+0x2c0>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d01f      	beq.n	8001d44 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d04:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <HAL_GPIO_Init+0x2c0>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	490d      	ldr	r1, [pc, #52]	; (8001d40 <HAL_GPIO_Init+0x2c0>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]
 8001d10:	e01f      	b.n	8001d52 <HAL_GPIO_Init+0x2d2>
 8001d12:	bf00      	nop
 8001d14:	10320000 	.word	0x10320000
 8001d18:	10310000 	.word	0x10310000
 8001d1c:	10220000 	.word	0x10220000
 8001d20:	10210000 	.word	0x10210000
 8001d24:	10120000 	.word	0x10120000
 8001d28:	10110000 	.word	0x10110000
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40010000 	.word	0x40010000
 8001d34:	40010800 	.word	0x40010800
 8001d38:	40010c00 	.word	0x40010c00
 8001d3c:	40011000 	.word	0x40011000
 8001d40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_GPIO_Init+0x2f4>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	4909      	ldr	r1, [pc, #36]	; (8001d74 <HAL_GPIO_Init+0x2f4>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	3301      	adds	r3, #1
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f47f ae96 	bne.w	8001a94 <HAL_GPIO_Init+0x14>
  }
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	372c      	adds	r7, #44	; 0x2c
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	40010400 	.word	0x40010400

08001d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	807b      	strh	r3, [r7, #2]
 8001d84:	4613      	mov	r3, r2
 8001d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d88:	787b      	ldrb	r3, [r7, #1]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d8e:	887a      	ldrh	r2, [r7, #2]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d94:	e003      	b.n	8001d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d96:	887b      	ldrh	r3, [r7, #2]
 8001d98:	041a      	lsls	r2, r3, #16
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	611a      	str	r2, [r3, #16]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dba:	887a      	ldrh	r2, [r7, #2]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	041a      	lsls	r2, r3, #16
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	43d9      	mvns	r1, r3
 8001dc6:	887b      	ldrh	r3, [r7, #2]
 8001dc8:	400b      	ands	r3, r1
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	611a      	str	r2, [r3, #16]
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
	...

08001ddc <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	4a08      	ldr	r2, [pc, #32]	; (8001e10 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001dee:	f023 0304 	bic.w	r3, r3, #4
 8001df2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001dfa:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001dfc:	e002      	b.n	8001e04 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8001dfe:	bf40      	sev
    __WFE();
 8001e00:	bf20      	wfe
    __WFE();
 8001e02:	bf20      	wfe
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e272      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 8087 	beq.w	8001f42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e34:	4b92      	ldr	r3, [pc, #584]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 030c 	and.w	r3, r3, #12
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d00c      	beq.n	8001e5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e40:	4b8f      	ldr	r3, [pc, #572]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d112      	bne.n	8001e72 <HAL_RCC_OscConfig+0x5e>
 8001e4c:	4b8c      	ldr	r3, [pc, #560]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e58:	d10b      	bne.n	8001e72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e5a:	4b89      	ldr	r3, [pc, #548]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d06c      	beq.n	8001f40 <HAL_RCC_OscConfig+0x12c>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d168      	bne.n	8001f40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e24c      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7a:	d106      	bne.n	8001e8a <HAL_RCC_OscConfig+0x76>
 8001e7c:	4b80      	ldr	r3, [pc, #512]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a7f      	ldr	r2, [pc, #508]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	e02e      	b.n	8001ee8 <HAL_RCC_OscConfig+0xd4>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10c      	bne.n	8001eac <HAL_RCC_OscConfig+0x98>
 8001e92:	4b7b      	ldr	r3, [pc, #492]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a7a      	ldr	r2, [pc, #488]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	4b78      	ldr	r3, [pc, #480]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a77      	ldr	r2, [pc, #476]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e01d      	b.n	8001ee8 <HAL_RCC_OscConfig+0xd4>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0xbc>
 8001eb6:	4b72      	ldr	r3, [pc, #456]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a71      	ldr	r2, [pc, #452]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	4b6f      	ldr	r3, [pc, #444]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a6e      	ldr	r2, [pc, #440]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e00b      	b.n	8001ee8 <HAL_RCC_OscConfig+0xd4>
 8001ed0:	4b6b      	ldr	r3, [pc, #428]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a6a      	ldr	r2, [pc, #424]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	4b68      	ldr	r3, [pc, #416]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a67      	ldr	r2, [pc, #412]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d013      	beq.n	8001f18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7ff f8aa 	bl	8001048 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7ff f8a6 	bl	8001048 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	; 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e200      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	4b5d      	ldr	r3, [pc, #372]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0xe4>
 8001f16:	e014      	b.n	8001f42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7ff f896 	bl	8001048 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f20:	f7ff f892 	bl	8001048 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	; 0x64
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e1ec      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f32:	4b53      	ldr	r3, [pc, #332]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x10c>
 8001f3e:	e000      	b.n	8001f42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d063      	beq.n	8002016 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f4e:	4b4c      	ldr	r3, [pc, #304]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00b      	beq.n	8001f72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f5a:	4b49      	ldr	r3, [pc, #292]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d11c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x18c>
 8001f66:	4b46      	ldr	r3, [pc, #280]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d116      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f72:	4b43      	ldr	r3, [pc, #268]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d005      	beq.n	8001f8a <HAL_RCC_OscConfig+0x176>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d001      	beq.n	8001f8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e1c0      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8a:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4939      	ldr	r1, [pc, #228]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9e:	e03a      	b.n	8002016 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d020      	beq.n	8001fea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa8:	4b36      	ldr	r3, [pc, #216]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fae:	f7ff f84b 	bl	8001048 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb6:	f7ff f847 	bl	8001048 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e1a1      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc8:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f0      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd4:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4927      	ldr	r1, [pc, #156]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	600b      	str	r3, [r1, #0]
 8001fe8:	e015      	b.n	8002016 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fea:	4b26      	ldr	r3, [pc, #152]	; (8002084 <HAL_RCC_OscConfig+0x270>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7ff f82a 	bl	8001048 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff8:	f7ff f826 	bl	8001048 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e180      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200a:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d03a      	beq.n	8002098 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d019      	beq.n	800205e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800202a:	4b17      	ldr	r3, [pc, #92]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 800202c:	2201      	movs	r2, #1
 800202e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002030:	f7ff f80a 	bl	8001048 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002038:	f7ff f806 	bl	8001048 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e160      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204a:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <HAL_RCC_OscConfig+0x26c>)
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002056:	2001      	movs	r0, #1
 8002058:	f000 face 	bl	80025f8 <RCC_Delay>
 800205c:	e01c      	b.n	8002098 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002064:	f7fe fff0 	bl	8001048 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206a:	e00f      	b.n	800208c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206c:	f7fe ffec 	bl	8001048 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d908      	bls.n	800208c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e146      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	42420000 	.word	0x42420000
 8002088:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208c:	4b92      	ldr	r3, [pc, #584]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1e9      	bne.n	800206c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80a6 	beq.w	80021f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020aa:	4b8b      	ldr	r3, [pc, #556]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10d      	bne.n	80020d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	4b88      	ldr	r3, [pc, #544]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	4a87      	ldr	r2, [pc, #540]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c0:	61d3      	str	r3, [r2, #28]
 80020c2:	4b85      	ldr	r3, [pc, #532]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ce:	2301      	movs	r3, #1
 80020d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d2:	4b82      	ldr	r3, [pc, #520]	; (80022dc <HAL_RCC_OscConfig+0x4c8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d118      	bne.n	8002110 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020de:	4b7f      	ldr	r3, [pc, #508]	; (80022dc <HAL_RCC_OscConfig+0x4c8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a7e      	ldr	r2, [pc, #504]	; (80022dc <HAL_RCC_OscConfig+0x4c8>)
 80020e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ea:	f7fe ffad 	bl	8001048 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f2:	f7fe ffa9 	bl	8001048 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b64      	cmp	r3, #100	; 0x64
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e103      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002104:	4b75      	ldr	r3, [pc, #468]	; (80022dc <HAL_RCC_OscConfig+0x4c8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x312>
 8002118:	4b6f      	ldr	r3, [pc, #444]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4a6e      	ldr	r2, [pc, #440]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6213      	str	r3, [r2, #32]
 8002124:	e02d      	b.n	8002182 <HAL_RCC_OscConfig+0x36e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x334>
 800212e:	4b6a      	ldr	r3, [pc, #424]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	4a69      	ldr	r2, [pc, #420]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	6213      	str	r3, [r2, #32]
 800213a:	4b67      	ldr	r3, [pc, #412]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	4a66      	ldr	r2, [pc, #408]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002140:	f023 0304 	bic.w	r3, r3, #4
 8002144:	6213      	str	r3, [r2, #32]
 8002146:	e01c      	b.n	8002182 <HAL_RCC_OscConfig+0x36e>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	2b05      	cmp	r3, #5
 800214e:	d10c      	bne.n	800216a <HAL_RCC_OscConfig+0x356>
 8002150:	4b61      	ldr	r3, [pc, #388]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4a60      	ldr	r2, [pc, #384]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002156:	f043 0304 	orr.w	r3, r3, #4
 800215a:	6213      	str	r3, [r2, #32]
 800215c:	4b5e      	ldr	r3, [pc, #376]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4a5d      	ldr	r2, [pc, #372]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6213      	str	r3, [r2, #32]
 8002168:	e00b      	b.n	8002182 <HAL_RCC_OscConfig+0x36e>
 800216a:	4b5b      	ldr	r3, [pc, #364]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4a5a      	ldr	r2, [pc, #360]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002170:	f023 0301 	bic.w	r3, r3, #1
 8002174:	6213      	str	r3, [r2, #32]
 8002176:	4b58      	ldr	r3, [pc, #352]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4a57      	ldr	r2, [pc, #348]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	f023 0304 	bic.w	r3, r3, #4
 8002180:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d015      	beq.n	80021b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218a:	f7fe ff5d 	bl	8001048 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002190:	e00a      	b.n	80021a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7fe ff59 	bl	8001048 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e0b1      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a8:	4b4b      	ldr	r3, [pc, #300]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0ee      	beq.n	8002192 <HAL_RCC_OscConfig+0x37e>
 80021b4:	e014      	b.n	80021e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b6:	f7fe ff47 	bl	8001048 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021bc:	e00a      	b.n	80021d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021be:	f7fe ff43 	bl	8001048 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e09b      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d4:	4b40      	ldr	r3, [pc, #256]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1ee      	bne.n	80021be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021e0:	7dfb      	ldrb	r3, [r7, #23]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d105      	bne.n	80021f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e6:	4b3c      	ldr	r3, [pc, #240]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	4a3b      	ldr	r2, [pc, #236]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 8087 	beq.w	800230a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021fc:	4b36      	ldr	r3, [pc, #216]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 030c 	and.w	r3, r3, #12
 8002204:	2b08      	cmp	r3, #8
 8002206:	d061      	beq.n	80022cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d146      	bne.n	800229e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002210:	4b33      	ldr	r3, [pc, #204]	; (80022e0 <HAL_RCC_OscConfig+0x4cc>)
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7fe ff17 	bl	8001048 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221e:	f7fe ff13 	bl	8001048 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e06d      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002230:	4b29      	ldr	r3, [pc, #164]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f0      	bne.n	800221e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002244:	d108      	bne.n	8002258 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002246:	4b24      	ldr	r3, [pc, #144]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	4921      	ldr	r1, [pc, #132]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002258:	4b1f      	ldr	r3, [pc, #124]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a19      	ldr	r1, [r3, #32]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	430b      	orrs	r3, r1
 800226a:	491b      	ldr	r1, [pc, #108]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002270:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <HAL_RCC_OscConfig+0x4cc>)
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002276:	f7fe fee7 	bl	8001048 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227e:	f7fe fee3 	bl	8001048 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e03d      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x46a>
 800229c:	e035      	b.n	800230a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229e:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <HAL_RCC_OscConfig+0x4cc>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7fe fed0 	bl	8001048 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ac:	f7fe fecc 	bl	8001048 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e026      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x498>
 80022ca:	e01e      	b.n	800230a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d107      	bne.n	80022e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e019      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40007000 	.word	0x40007000
 80022e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCC_OscConfig+0x500>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d106      	bne.n	8002306 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	429a      	cmp	r2, r3
 8002304:	d001      	beq.n	800230a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000

08002318 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0d0      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800232c:	4b6a      	ldr	r3, [pc, #424]	; (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d910      	bls.n	800235c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b67      	ldr	r3, [pc, #412]	; (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 0207 	bic.w	r2, r3, #7
 8002342:	4965      	ldr	r1, [pc, #404]	; (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234a:	4b63      	ldr	r3, [pc, #396]	; (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0b8      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d020      	beq.n	80023aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002374:	4b59      	ldr	r3, [pc, #356]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4a58      	ldr	r2, [pc, #352]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800237e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800238c:	4b53      	ldr	r3, [pc, #332]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4a52      	ldr	r2, [pc, #328]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002396:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002398:	4b50      	ldr	r3, [pc, #320]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	494d      	ldr	r1, [pc, #308]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d040      	beq.n	8002438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023be:	4b47      	ldr	r3, [pc, #284]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d115      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e07f      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d6:	4b41      	ldr	r3, [pc, #260]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d109      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e073      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e6:	4b3d      	ldr	r3, [pc, #244]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e06b      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f6:	4b39      	ldr	r3, [pc, #228]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f023 0203 	bic.w	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4936      	ldr	r1, [pc, #216]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002408:	f7fe fe1e 	bl	8001048 <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	e00a      	b.n	8002426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002410:	f7fe fe1a 	bl	8001048 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	; 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e053      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	4b2d      	ldr	r3, [pc, #180]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 020c 	and.w	r2, r3, #12
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	429a      	cmp	r2, r3
 8002436:	d1eb      	bne.n	8002410 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002438:	4b27      	ldr	r3, [pc, #156]	; (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d210      	bcs.n	8002468 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 0207 	bic.w	r2, r3, #7
 800244e:	4922      	ldr	r1, [pc, #136]	; (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e032      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002474:	4b19      	ldr	r3, [pc, #100]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	4916      	ldr	r1, [pc, #88]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	4313      	orrs	r3, r2
 8002484:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d009      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002492:	4b12      	ldr	r3, [pc, #72]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	490e      	ldr	r1, [pc, #56]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024a6:	f000 f821 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 80024aa:	4602      	mov	r2, r0
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	490a      	ldr	r1, [pc, #40]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80024b8:	5ccb      	ldrb	r3, [r1, r3]
 80024ba:	fa22 f303 	lsr.w	r3, r2, r3
 80024be:	4a09      	ldr	r2, [pc, #36]	; (80024e4 <HAL_RCC_ClockConfig+0x1cc>)
 80024c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <HAL_RCC_ClockConfig+0x1d0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe fd7c 	bl	8000fc4 <HAL_InitTick>

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40022000 	.word	0x40022000
 80024dc:	40021000 	.word	0x40021000
 80024e0:	080045f0 	.word	0x080045f0
 80024e4:	20000000 	.word	0x20000000
 80024e8:	20000004 	.word	0x20000004

080024ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	2300      	movs	r3, #0
 8002500:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002506:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <HAL_RCC_GetSysClockFreq+0x94>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b04      	cmp	r3, #4
 8002514:	d002      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x30>
 8002516:	2b08      	cmp	r3, #8
 8002518:	d003      	beq.n	8002522 <HAL_RCC_GetSysClockFreq+0x36>
 800251a:	e027      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <HAL_RCC_GetSysClockFreq+0x98>)
 800251e:	613b      	str	r3, [r7, #16]
      break;
 8002520:	e027      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	0c9b      	lsrs	r3, r3, #18
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	4a17      	ldr	r2, [pc, #92]	; (8002588 <HAL_RCC_GetSysClockFreq+0x9c>)
 800252c:	5cd3      	ldrb	r3, [r2, r3]
 800252e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d010      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800253a:	4b11      	ldr	r3, [pc, #68]	; (8002580 <HAL_RCC_GetSysClockFreq+0x94>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	0c5b      	lsrs	r3, r3, #17
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	4a11      	ldr	r2, [pc, #68]	; (800258c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002546:	5cd3      	ldrb	r3, [r2, r3]
 8002548:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <HAL_RCC_GetSysClockFreq+0x98>)
 800254e:	fb03 f202 	mul.w	r2, r3, r2
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	fbb2 f3f3 	udiv	r3, r2, r3
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	e004      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a0c      	ldr	r2, [pc, #48]	; (8002590 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002560:	fb02 f303 	mul.w	r3, r2, r3
 8002564:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	613b      	str	r3, [r7, #16]
      break;
 800256a:	e002      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_RCC_GetSysClockFreq+0x98>)
 800256e:	613b      	str	r3, [r7, #16]
      break;
 8002570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002572:	693b      	ldr	r3, [r7, #16]
}
 8002574:	4618      	mov	r0, r3
 8002576:	371c      	adds	r7, #28
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	007a1200 	.word	0x007a1200
 8002588:	08004608 	.word	0x08004608
 800258c:	08004618 	.word	0x08004618
 8002590:	003d0900 	.word	0x003d0900

08002594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002598:	4b02      	ldr	r3, [pc, #8]	; (80025a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	20000000 	.word	0x20000000

080025a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025ac:	f7ff fff2 	bl	8002594 <HAL_RCC_GetHCLKFreq>
 80025b0:	4602      	mov	r2, r0
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	0a1b      	lsrs	r3, r3, #8
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	4903      	ldr	r1, [pc, #12]	; (80025cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025be:	5ccb      	ldrb	r3, [r1, r3]
 80025c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000
 80025cc:	08004600 	.word	0x08004600

080025d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025d4:	f7ff ffde 	bl	8002594 <HAL_RCC_GetHCLKFreq>
 80025d8:	4602      	mov	r2, r0
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	0adb      	lsrs	r3, r3, #11
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	4903      	ldr	r1, [pc, #12]	; (80025f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025e6:	5ccb      	ldrb	r3, [r1, r3]
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08004600 	.word	0x08004600

080025f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002600:	4b0a      	ldr	r3, [pc, #40]	; (800262c <RCC_Delay+0x34>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <RCC_Delay+0x38>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	0a5b      	lsrs	r3, r3, #9
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	fb02 f303 	mul.w	r3, r2, r3
 8002612:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002614:	bf00      	nop
  }
  while (Delay --);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1e5a      	subs	r2, r3, #1
 800261a:	60fa      	str	r2, [r7, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f9      	bne.n	8002614 <RCC_Delay+0x1c>
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	20000000 	.word	0x20000000
 8002630:	10624dd3 	.word	0x10624dd3

08002634 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d07d      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002650:	2300      	movs	r3, #0
 8002652:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002654:	4b4f      	ldr	r3, [pc, #316]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10d      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002660:	4b4c      	ldr	r3, [pc, #304]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	4a4b      	ldr	r2, [pc, #300]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266a:	61d3      	str	r3, [r2, #28]
 800266c:	4b49      	ldr	r3, [pc, #292]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002678:	2301      	movs	r3, #1
 800267a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267c:	4b46      	ldr	r3, [pc, #280]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d118      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002688:	4b43      	ldr	r3, [pc, #268]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a42      	ldr	r2, [pc, #264]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800268e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002692:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002694:	f7fe fcd8 	bl	8001048 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269a:	e008      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269c:	f7fe fcd4 	bl	8001048 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e06d      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ae:	4b3a      	ldr	r3, [pc, #232]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026ba:	4b36      	ldr	r3, [pc, #216]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d02e      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d027      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026d8:	4b2e      	ldr	r3, [pc, #184]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026e2:	4b2e      	ldr	r3, [pc, #184]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026e8:	4b2c      	ldr	r3, [pc, #176]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026ee:	4a29      	ldr	r2, [pc, #164]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d014      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fe:	f7fe fca3 	bl	8001048 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002704:	e00a      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002706:	f7fe fc9f 	bl	8001048 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	f241 3288 	movw	r2, #5000	; 0x1388
 8002714:	4293      	cmp	r3, r2
 8002716:	d901      	bls.n	800271c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e036      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271c:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0ee      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002728:	4b1a      	ldr	r3, [pc, #104]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4917      	ldr	r1, [pc, #92]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002736:	4313      	orrs	r3, r2
 8002738:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800273a:	7dfb      	ldrb	r3, [r7, #23]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d105      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002740:	4b14      	ldr	r3, [pc, #80]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	4a13      	ldr	r2, [pc, #76]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800274a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002758:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	490b      	ldr	r1, [pc, #44]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002766:	4313      	orrs	r3, r2
 8002768:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0310 	and.w	r3, r3, #16
 8002772:	2b00      	cmp	r3, #0
 8002774:	d008      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002776:	4b07      	ldr	r3, [pc, #28]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	4904      	ldr	r1, [pc, #16]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002784:	4313      	orrs	r3, r2
 8002786:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
 8002798:	40007000 	.word	0x40007000
 800279c:	42420440 	.word	0x42420440

080027a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e041      	b.n	8002836 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fe fad2 	bl	8000d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3304      	adds	r3, #4
 80027dc:	4619      	mov	r1, r3
 80027de:	4610      	mov	r0, r2
 80027e0:	f000 fa6e 	bl	8002cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d001      	beq.n	8002858 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e035      	b.n	80028c4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a16      	ldr	r2, [pc, #88]	; (80028d0 <HAL_TIM_Base_Start_IT+0x90>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d009      	beq.n	800288e <HAL_TIM_Base_Start_IT+0x4e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002882:	d004      	beq.n	800288e <HAL_TIM_Base_Start_IT+0x4e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a12      	ldr	r2, [pc, #72]	; (80028d4 <HAL_TIM_Base_Start_IT+0x94>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d111      	bne.n	80028b2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b06      	cmp	r3, #6
 800289e:	d010      	beq.n	80028c2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b0:	e007      	b.n	80028c2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0201 	orr.w	r2, r2, #1
 80028c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40012c00 	.word	0x40012c00
 80028d4:	40000400 	.word	0x40000400

080028d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d122      	bne.n	8002934 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d11b      	bne.n	8002934 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0202 	mvn.w	r2, #2
 8002904:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f9b4 	bl	8002c88 <HAL_TIM_IC_CaptureCallback>
 8002920:	e005      	b.n	800292e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f9a7 	bl	8002c76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f9b6 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b04      	cmp	r3, #4
 8002940:	d122      	bne.n	8002988 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b04      	cmp	r3, #4
 800294e:	d11b      	bne.n	8002988 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0204 	mvn.w	r2, #4
 8002958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2202      	movs	r2, #2
 800295e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f98a 	bl	8002c88 <HAL_TIM_IC_CaptureCallback>
 8002974:	e005      	b.n	8002982 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f97d 	bl	8002c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f98c 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b08      	cmp	r3, #8
 8002994:	d122      	bne.n	80029dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d11b      	bne.n	80029dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f06f 0208 	mvn.w	r2, #8
 80029ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2204      	movs	r2, #4
 80029b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f960 	bl	8002c88 <HAL_TIM_IC_CaptureCallback>
 80029c8:	e005      	b.n	80029d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f953 	bl	8002c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f962 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	2b10      	cmp	r3, #16
 80029e8:	d122      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	2b10      	cmp	r3, #16
 80029f6:	d11b      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f06f 0210 	mvn.w	r2, #16
 8002a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2208      	movs	r2, #8
 8002a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f936 	bl	8002c88 <HAL_TIM_IC_CaptureCallback>
 8002a1c:	e005      	b.n	8002a2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f929 	bl	8002c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f938 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d10e      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d107      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f06f 0201 	mvn.w	r2, #1
 8002a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fd fe14 	bl	8000684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a66:	2b80      	cmp	r3, #128	; 0x80
 8002a68:	d10e      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a74:	2b80      	cmp	r3, #128	; 0x80
 8002a76:	d107      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fa6b 	bl	8002f5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a92:	2b40      	cmp	r3, #64	; 0x40
 8002a94:	d10e      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d107      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f8fc 	bl	8002cac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b20      	cmp	r3, #32
 8002ac0:	d10e      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d107      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0220 	mvn.w	r2, #32
 8002ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fa36 	bl	8002f4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_TIM_ConfigClockSource+0x1c>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e0b4      	b.n	8002c6e <HAL_TIM_ConfigClockSource+0x186>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b3c:	d03e      	beq.n	8002bbc <HAL_TIM_ConfigClockSource+0xd4>
 8002b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b42:	f200 8087 	bhi.w	8002c54 <HAL_TIM_ConfigClockSource+0x16c>
 8002b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b4a:	f000 8086 	beq.w	8002c5a <HAL_TIM_ConfigClockSource+0x172>
 8002b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b52:	d87f      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x16c>
 8002b54:	2b70      	cmp	r3, #112	; 0x70
 8002b56:	d01a      	beq.n	8002b8e <HAL_TIM_ConfigClockSource+0xa6>
 8002b58:	2b70      	cmp	r3, #112	; 0x70
 8002b5a:	d87b      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x16c>
 8002b5c:	2b60      	cmp	r3, #96	; 0x60
 8002b5e:	d050      	beq.n	8002c02 <HAL_TIM_ConfigClockSource+0x11a>
 8002b60:	2b60      	cmp	r3, #96	; 0x60
 8002b62:	d877      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x16c>
 8002b64:	2b50      	cmp	r3, #80	; 0x50
 8002b66:	d03c      	beq.n	8002be2 <HAL_TIM_ConfigClockSource+0xfa>
 8002b68:	2b50      	cmp	r3, #80	; 0x50
 8002b6a:	d873      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x16c>
 8002b6c:	2b40      	cmp	r3, #64	; 0x40
 8002b6e:	d058      	beq.n	8002c22 <HAL_TIM_ConfigClockSource+0x13a>
 8002b70:	2b40      	cmp	r3, #64	; 0x40
 8002b72:	d86f      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x16c>
 8002b74:	2b30      	cmp	r3, #48	; 0x30
 8002b76:	d064      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x15a>
 8002b78:	2b30      	cmp	r3, #48	; 0x30
 8002b7a:	d86b      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x16c>
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d060      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x15a>
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d867      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x16c>
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d05c      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x15a>
 8002b88:	2b10      	cmp	r3, #16
 8002b8a:	d05a      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x15a>
 8002b8c:	e062      	b.n	8002c54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b9e:	f000 f95e 	bl	8002e5e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	609a      	str	r2, [r3, #8]
      break;
 8002bba:	e04f      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bcc:	f000 f947 	bl	8002e5e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bde:	609a      	str	r2, [r3, #8]
      break;
 8002be0:	e03c      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bee:	461a      	mov	r2, r3
 8002bf0:	f000 f8be 	bl	8002d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2150      	movs	r1, #80	; 0x50
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 f915 	bl	8002e2a <TIM_ITRx_SetConfig>
      break;
 8002c00:	e02c      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f000 f8dc 	bl	8002dcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2160      	movs	r1, #96	; 0x60
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f905 	bl	8002e2a <TIM_ITRx_SetConfig>
      break;
 8002c20:	e01c      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f000 f89e 	bl	8002d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2140      	movs	r1, #64	; 0x40
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 f8f5 	bl	8002e2a <TIM_ITRx_SetConfig>
      break;
 8002c40:	e00c      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	f000 f8ec 	bl	8002e2a <TIM_ITRx_SetConfig>
      break;
 8002c52:	e003      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
      break;
 8002c58:	e000      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr
	...

08002cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a25      	ldr	r2, [pc, #148]	; (8002d68 <TIM_Base_SetConfig+0xa8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d007      	beq.n	8002ce8 <TIM_Base_SetConfig+0x28>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cde:	d003      	beq.n	8002ce8 <TIM_Base_SetConfig+0x28>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a22      	ldr	r2, [pc, #136]	; (8002d6c <TIM_Base_SetConfig+0xac>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d108      	bne.n	8002cfa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a1a      	ldr	r2, [pc, #104]	; (8002d68 <TIM_Base_SetConfig+0xa8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d007      	beq.n	8002d12 <TIM_Base_SetConfig+0x52>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d08:	d003      	beq.n	8002d12 <TIM_Base_SetConfig+0x52>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a17      	ldr	r2, [pc, #92]	; (8002d6c <TIM_Base_SetConfig+0xac>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d108      	bne.n	8002d24 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <TIM_Base_SetConfig+0xa8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d103      	bne.n	8002d58 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	615a      	str	r2, [r3, #20]
}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr
 8002d68:	40012c00 	.word	0x40012c00
 8002d6c:	40000400 	.word	0x40000400

08002d70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	f023 0201 	bic.w	r2, r3, #1
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f023 030a 	bic.w	r3, r3, #10
 8002dac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	621a      	str	r2, [r3, #32]
}
 8002dc2:	bf00      	nop
 8002dc4:	371c      	adds	r7, #28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	f023 0210 	bic.w	r2, r3, #16
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	031b      	lsls	r3, r3, #12
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e08:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	621a      	str	r2, [r3, #32]
}
 8002e20:	bf00      	nop
 8002e22:	371c      	adds	r7, #28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr

08002e2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b085      	sub	sp, #20
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f043 0307 	orr.w	r3, r3, #7
 8002e4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	609a      	str	r2, [r3, #8]
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b087      	sub	sp, #28
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
 8002e6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	021a      	lsls	r2, r3, #8
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	431a      	orrs	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	609a      	str	r2, [r3, #8]
}
 8002e92:	bf00      	nop
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e041      	b.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d009      	beq.n	8002f0c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f00:	d004      	beq.n	8002f0c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a10      	ldr	r2, [pc, #64]	; (8002f48 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d10c      	bne.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40012c00 	.word	0x40012c00
 8002f48:	40000400 	.word	0x40000400

08002f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr

08002f5e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e042      	b.n	8003008 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fd ff0e 	bl	8000db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2224      	movs	r2, #36	; 0x24
 8002fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 fdc5 	bl	8003b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695a      	ldr	r2, [r3, #20]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fe8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08a      	sub	sp, #40	; 0x28
 8003014:	af02      	add	r7, sp, #8
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	4613      	mov	r3, r2
 800301e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b20      	cmp	r3, #32
 800302e:	d16d      	bne.n	800310c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_UART_Transmit+0x2c>
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e066      	b.n	800310e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2221      	movs	r2, #33	; 0x21
 800304a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800304e:	f7fd fffb 	bl	8001048 <HAL_GetTick>
 8003052:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	88fa      	ldrh	r2, [r7, #6]
 8003058:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	88fa      	ldrh	r2, [r7, #6]
 800305e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003068:	d108      	bne.n	800307c <HAL_UART_Transmit+0x6c>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d104      	bne.n	800307c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	e003      	b.n	8003084 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003080:	2300      	movs	r3, #0
 8003082:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003084:	e02a      	b.n	80030dc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2200      	movs	r2, #0
 800308e:	2180      	movs	r1, #128	; 0x80
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 fb14 	bl	80036be <UART_WaitOnFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e036      	b.n	800310e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10b      	bne.n	80030be <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	3302      	adds	r3, #2
 80030ba:	61bb      	str	r3, [r7, #24]
 80030bc:	e007      	b.n	80030ce <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	781a      	ldrb	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	3301      	adds	r3, #1
 80030cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1cf      	bne.n	8003086 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2200      	movs	r2, #0
 80030ee:	2140      	movs	r1, #64	; 0x40
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 fae4 	bl	80036be <UART_WaitOnFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e006      	b.n	800310e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	e000      	b.n	800310e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800310c:	2302      	movs	r3, #2
  }
}
 800310e:	4618      	mov	r0, r3
 8003110:	3720      	adds	r7, #32
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	4613      	mov	r3, r2
 8003122:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b20      	cmp	r3, #32
 800312e:	d112      	bne.n	8003156 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <HAL_UART_Receive_IT+0x26>
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e00b      	b.n	8003158 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	461a      	mov	r2, r3
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 fb24 	bl	800379a <UART_Start_Receive_IT>
 8003152:	4603      	mov	r3, r0
 8003154:	e000      	b.n	8003158 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003156:	2302      	movs	r3, #2
  }
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b0ba      	sub	sp, #232	; 0xe8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003186:	2300      	movs	r3, #0
 8003188:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800318c:	2300      	movs	r3, #0
 800318e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800319e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10f      	bne.n	80031c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <HAL_UART_IRQHandler+0x66>
 80031b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fc01 	bl	80039c6 <UART_Receive_IT>
      return;
 80031c4:	e25b      	b.n	800367e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 80de 	beq.w	800338c <HAL_UART_IRQHandler+0x22c>
 80031d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d106      	bne.n	80031ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80d1 	beq.w	800338c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00b      	beq.n	800320e <HAL_UART_IRQHandler+0xae>
 80031f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d005      	beq.n	800320e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	f043 0201 	orr.w	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800320e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <HAL_UART_IRQHandler+0xd2>
 800321a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	f043 0202 	orr.w	r2, r3, #2
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_UART_IRQHandler+0xf6>
 800323e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	f043 0204 	orr.w	r2, r3, #4
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d011      	beq.n	8003286 <HAL_UART_IRQHandler+0x126>
 8003262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d105      	bne.n	800327a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800326e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	f043 0208 	orr.w	r2, r3, #8
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 81f2 	beq.w	8003674 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <HAL_UART_IRQHandler+0x14e>
 800329c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032a0:	f003 0320 	and.w	r3, r3, #32
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 fb8c 	bl	80039c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	bf14      	ite	ne
 80032bc:	2301      	movne	r3, #1
 80032be:	2300      	moveq	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d103      	bne.n	80032da <HAL_UART_IRQHandler+0x17a>
 80032d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d04f      	beq.n	800337a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fa96 	bl	800380c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d041      	beq.n	8003372 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3314      	adds	r3, #20
 80032f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032fc:	e853 3f00 	ldrex	r3, [r3]
 8003300:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003304:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800330c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	3314      	adds	r3, #20
 8003316:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800331a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800331e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003322:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003326:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800332a:	e841 2300 	strex	r3, r2, [r1]
 800332e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1d9      	bne.n	80032ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333e:	2b00      	cmp	r3, #0
 8003340:	d013      	beq.n	800336a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003346:	4a7e      	ldr	r2, [pc, #504]	; (8003540 <HAL_UART_IRQHandler+0x3e0>)
 8003348:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334e:	4618      	mov	r0, r3
 8003350:	f7fe fb1e 	bl	8001990 <HAL_DMA_Abort_IT>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d016      	beq.n	8003388 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003364:	4610      	mov	r0, r2
 8003366:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003368:	e00e      	b.n	8003388 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f993 	bl	8003696 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003370:	e00a      	b.n	8003388 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f98f 	bl	8003696 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003378:	e006      	b.n	8003388 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f98b 	bl	8003696 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003386:	e175      	b.n	8003674 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003388:	bf00      	nop
    return;
 800338a:	e173      	b.n	8003674 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	2b01      	cmp	r3, #1
 8003392:	f040 814f 	bne.w	8003634 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 8148 	beq.w	8003634 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 8141 	beq.w	8003634 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 80b6 	beq.w	8003544 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 8145 	beq.w	8003678 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033f6:	429a      	cmp	r2, r3
 80033f8:	f080 813e 	bcs.w	8003678 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003402:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	2b20      	cmp	r3, #32
 800340c:	f000 8088 	beq.w	8003520 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	330c      	adds	r3, #12
 8003416:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800341e:	e853 3f00 	ldrex	r3, [r3]
 8003422:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003426:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800342a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800342e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	330c      	adds	r3, #12
 8003438:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800343c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003440:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003444:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003448:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800344c:	e841 2300 	strex	r3, r2, [r1]
 8003450:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003454:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1d9      	bne.n	8003410 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3314      	adds	r3, #20
 8003462:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003466:	e853 3f00 	ldrex	r3, [r3]
 800346a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800346c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800346e:	f023 0301 	bic.w	r3, r3, #1
 8003472:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	3314      	adds	r3, #20
 800347c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003480:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003484:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003486:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003488:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800348c:	e841 2300 	strex	r3, r2, [r1]
 8003490:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e1      	bne.n	800345c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3314      	adds	r3, #20
 800349e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3314      	adds	r3, #20
 80034b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034c4:	e841 2300 	strex	r3, r2, [r1]
 80034c8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80034ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e3      	bne.n	8003498 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	330c      	adds	r3, #12
 80034e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034e8:	e853 3f00 	ldrex	r3, [r3]
 80034ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80034ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034f0:	f023 0310 	bic.w	r3, r3, #16
 80034f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	330c      	adds	r3, #12
 80034fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003502:	65ba      	str	r2, [r7, #88]	; 0x58
 8003504:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003508:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800350a:	e841 2300 	strex	r3, r2, [r1]
 800350e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e3      	bne.n	80034de <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	4618      	mov	r0, r3
 800351c:	f7fe f9fd 	bl	800191a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800352e:	b29b      	uxth	r3, r3
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	b29b      	uxth	r3, r3
 8003534:	4619      	mov	r1, r3
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f8b6 	bl	80036a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800353c:	e09c      	b.n	8003678 <HAL_UART_IRQHandler+0x518>
 800353e:	bf00      	nop
 8003540:	080038d1 	.word	0x080038d1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800354c:	b29b      	uxth	r3, r3
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 808e 	beq.w	800367c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003560:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 8089 	beq.w	800367c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	330c      	adds	r3, #12
 8003570:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003574:	e853 3f00 	ldrex	r3, [r3]
 8003578:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800357a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003580:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	330c      	adds	r3, #12
 800358a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800358e:	647a      	str	r2, [r7, #68]	; 0x44
 8003590:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003594:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800359c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e3      	bne.n	800356a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3314      	adds	r3, #20
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	e853 3f00 	ldrex	r3, [r3]
 80035b0:	623b      	str	r3, [r7, #32]
   return(result);
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	3314      	adds	r3, #20
 80035c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035c6:	633a      	str	r2, [r7, #48]	; 0x30
 80035c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e3      	bne.n	80035a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	330c      	adds	r3, #12
 80035ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	e853 3f00 	ldrex	r3, [r3]
 80035f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0310 	bic.w	r3, r3, #16
 80035fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	330c      	adds	r3, #12
 8003608:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800360c:	61fa      	str	r2, [r7, #28]
 800360e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003610:	69b9      	ldr	r1, [r7, #24]
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	e841 2300 	strex	r3, r2, [r1]
 8003618:	617b      	str	r3, [r7, #20]
   return(result);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e3      	bne.n	80035e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003626:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800362a:	4619      	mov	r1, r3
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f83b 	bl	80036a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003632:	e023      	b.n	800367c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363c:	2b00      	cmp	r3, #0
 800363e:	d009      	beq.n	8003654 <HAL_UART_IRQHandler+0x4f4>
 8003640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f953 	bl	80038f8 <UART_Transmit_IT>
    return;
 8003652:	e014      	b.n	800367e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00e      	beq.n	800367e <HAL_UART_IRQHandler+0x51e>
 8003660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f992 	bl	8003996 <UART_EndTransmit_IT>
    return;
 8003672:	e004      	b.n	800367e <HAL_UART_IRQHandler+0x51e>
    return;
 8003674:	bf00      	nop
 8003676:	e002      	b.n	800367e <HAL_UART_IRQHandler+0x51e>
      return;
 8003678:	bf00      	nop
 800367a:	e000      	b.n	800367e <HAL_UART_IRQHandler+0x51e>
      return;
 800367c:	bf00      	nop
  }
}
 800367e:	37e8      	adds	r7, #232	; 0xe8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr

08003696 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr

080036a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr

080036be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b090      	sub	sp, #64	; 0x40
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	603b      	str	r3, [r7, #0]
 80036ca:	4613      	mov	r3, r2
 80036cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ce:	e050      	b.n	8003772 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	d04c      	beq.n	8003772 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <UART_WaitOnFlagUntilTimeout+0x30>
 80036de:	f7fd fcb3 	bl	8001048 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d241      	bcs.n	8003772 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	330c      	adds	r3, #12
 80036f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f8:	e853 3f00 	ldrex	r3, [r3]
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003704:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	330c      	adds	r3, #12
 800370c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800370e:	637a      	str	r2, [r7, #52]	; 0x34
 8003710:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003712:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003716:	e841 2300 	strex	r3, r2, [r1]
 800371a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800371c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1e5      	bne.n	80036ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	3314      	adds	r3, #20
 8003728:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	e853 3f00 	ldrex	r3, [r3]
 8003730:	613b      	str	r3, [r7, #16]
   return(result);
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f023 0301 	bic.w	r3, r3, #1
 8003738:	63bb      	str	r3, [r7, #56]	; 0x38
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	3314      	adds	r3, #20
 8003740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003742:	623a      	str	r2, [r7, #32]
 8003744:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003746:	69f9      	ldr	r1, [r7, #28]
 8003748:	6a3a      	ldr	r2, [r7, #32]
 800374a:	e841 2300 	strex	r3, r2, [r1]
 800374e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1e5      	bne.n	8003722 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e00f      	b.n	8003792 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4013      	ands	r3, r2
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	429a      	cmp	r2, r3
 8003780:	bf0c      	ite	eq
 8003782:	2301      	moveq	r3, #1
 8003784:	2300      	movne	r3, #0
 8003786:	b2db      	uxtb	r3, r3
 8003788:	461a      	mov	r2, r3
 800378a:	79fb      	ldrb	r3, [r7, #7]
 800378c:	429a      	cmp	r2, r3
 800378e:	d09f      	beq.n	80036d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3740      	adds	r7, #64	; 0x40
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	4613      	mov	r3, r2
 80037a6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	88fa      	ldrh	r2, [r7, #6]
 80037b2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	88fa      	ldrh	r2, [r7, #6]
 80037b8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2222      	movs	r2, #34	; 0x22
 80037c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037de:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695a      	ldr	r2, [r3, #20]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0220 	orr.w	r2, r2, #32
 80037fe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr

0800380c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800380c:	b480      	push	{r7}
 800380e:	b095      	sub	sp, #84	; 0x54
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800381e:	e853 3f00 	ldrex	r3, [r3]
 8003822:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003826:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800382a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	330c      	adds	r3, #12
 8003832:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003834:	643a      	str	r2, [r7, #64]	; 0x40
 8003836:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003838:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800383a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800383c:	e841 2300 	strex	r3, r2, [r1]
 8003840:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e5      	bne.n	8003814 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3314      	adds	r3, #20
 800384e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	e853 3f00 	ldrex	r3, [r3]
 8003856:	61fb      	str	r3, [r7, #28]
   return(result);
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f023 0301 	bic.w	r3, r3, #1
 800385e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3314      	adds	r3, #20
 8003866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003868:	62fa      	str	r2, [r7, #44]	; 0x2c
 800386a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800386e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003870:	e841 2300 	strex	r3, r2, [r1]
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1e5      	bne.n	8003848 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	2b01      	cmp	r3, #1
 8003882:	d119      	bne.n	80038b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	330c      	adds	r3, #12
 800388a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	e853 3f00 	ldrex	r3, [r3]
 8003892:	60bb      	str	r3, [r7, #8]
   return(result);
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f023 0310 	bic.w	r3, r3, #16
 800389a:	647b      	str	r3, [r7, #68]	; 0x44
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	330c      	adds	r3, #12
 80038a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038a4:	61ba      	str	r2, [r7, #24]
 80038a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a8:	6979      	ldr	r1, [r7, #20]
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	e841 2300 	strex	r3, r2, [r1]
 80038b0:	613b      	str	r3, [r7, #16]
   return(result);
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1e5      	bne.n	8003884 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80038c6:	bf00      	nop
 80038c8:	3754      	adds	r7, #84	; 0x54
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr

080038d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f7ff fed3 	bl	8003696 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038f0:	bf00      	nop
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b21      	cmp	r3, #33	; 0x21
 800390a:	d13e      	bne.n	800398a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003914:	d114      	bne.n	8003940 <UART_Transmit_IT+0x48>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d110      	bne.n	8003940 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	461a      	mov	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003932:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	1c9a      	adds	r2, r3, #2
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	621a      	str	r2, [r3, #32]
 800393e:	e008      	b.n	8003952 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	1c59      	adds	r1, r3, #1
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6211      	str	r1, [r2, #32]
 800394a:	781a      	ldrb	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29b      	uxth	r3, r3
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	4619      	mov	r1, r3
 8003960:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10f      	bne.n	8003986 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003974:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003984:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	e000      	b.n	800398c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800398a:	2302      	movs	r3, #2
  }
}
 800398c:	4618      	mov	r0, r3
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr

08003996 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff fe64 	bl	8003684 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b08c      	sub	sp, #48	; 0x30
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b22      	cmp	r3, #34	; 0x22
 80039d8:	f040 80ae 	bne.w	8003b38 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e4:	d117      	bne.n	8003a16 <UART_Receive_IT+0x50>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d113      	bne.n	8003a16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0e:	1c9a      	adds	r2, r3, #2
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	629a      	str	r2, [r3, #40]	; 0x28
 8003a14:	e026      	b.n	8003a64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a28:	d007      	beq.n	8003a3a <UART_Receive_IT+0x74>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10a      	bne.n	8003a48 <UART_Receive_IT+0x82>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	e008      	b.n	8003a5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	4619      	mov	r1, r3
 8003a72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d15d      	bne.n	8003b34 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0220 	bic.w	r2, r2, #32
 8003a86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695a      	ldr	r2, [r3, #20]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0201 	bic.w	r2, r2, #1
 8003aa6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d135      	bne.n	8003b2a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	330c      	adds	r3, #12
 8003aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	e853 3f00 	ldrex	r3, [r3]
 8003ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f023 0310 	bic.w	r3, r3, #16
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	330c      	adds	r3, #12
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae4:	623a      	str	r2, [r7, #32]
 8003ae6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae8:	69f9      	ldr	r1, [r7, #28]
 8003aea:	6a3a      	ldr	r2, [r7, #32]
 8003aec:	e841 2300 	strex	r3, r2, [r1]
 8003af0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e5      	bne.n	8003ac4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	2b10      	cmp	r3, #16
 8003b04:	d10a      	bne.n	8003b1c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b20:	4619      	mov	r1, r3
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff fdc0 	bl	80036a8 <HAL_UARTEx_RxEventCallback>
 8003b28:	e002      	b.n	8003b30 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fc fbfe 	bl	800032c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	e002      	b.n	8003b3a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	e000      	b.n	8003b3a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003b38:	2302      	movs	r3, #2
  }
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3730      	adds	r7, #48	; 0x30
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b7e:	f023 030c 	bic.w	r3, r3, #12
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6812      	ldr	r2, [r2, #0]
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a2c      	ldr	r2, [pc, #176]	; (8003c58 <UART_SetConfig+0x114>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d103      	bne.n	8003bb4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bac:	f7fe fd10 	bl	80025d0 <HAL_RCC_GetPCLK2Freq>
 8003bb0:	60f8      	str	r0, [r7, #12]
 8003bb2:	e002      	b.n	8003bba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bb4:	f7fe fcf8 	bl	80025a8 <HAL_RCC_GetPCLK1Freq>
 8003bb8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009a      	lsls	r2, r3, #2
 8003bc4:	441a      	add	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	4a22      	ldr	r2, [pc, #136]	; (8003c5c <UART_SetConfig+0x118>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	0119      	lsls	r1, r3, #4
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	009a      	lsls	r2, r3, #2
 8003be4:	441a      	add	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bf0:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <UART_SetConfig+0x118>)
 8003bf2:	fba3 0302 	umull	r0, r3, r3, r2
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	2064      	movs	r0, #100	; 0x64
 8003bfa:	fb00 f303 	mul.w	r3, r0, r3
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	3332      	adds	r3, #50	; 0x32
 8003c04:	4a15      	ldr	r2, [pc, #84]	; (8003c5c <UART_SetConfig+0x118>)
 8003c06:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c10:	4419      	add	r1, r3
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	009a      	lsls	r2, r3, #2
 8003c1c:	441a      	add	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c28:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <UART_SetConfig+0x118>)
 8003c2a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	2064      	movs	r0, #100	; 0x64
 8003c32:	fb00 f303 	mul.w	r3, r0, r3
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	3332      	adds	r3, #50	; 0x32
 8003c3c:	4a07      	ldr	r2, [pc, #28]	; (8003c5c <UART_SetConfig+0x118>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	f003 020f 	and.w	r2, r3, #15
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	440a      	add	r2, r1
 8003c4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40013800 	.word	0x40013800
 8003c5c:	51eb851f 	.word	0x51eb851f

08003c60 <siprintf>:
 8003c60:	b40e      	push	{r1, r2, r3}
 8003c62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c66:	b500      	push	{lr}
 8003c68:	b09c      	sub	sp, #112	; 0x70
 8003c6a:	ab1d      	add	r3, sp, #116	; 0x74
 8003c6c:	9002      	str	r0, [sp, #8]
 8003c6e:	9006      	str	r0, [sp, #24]
 8003c70:	9107      	str	r1, [sp, #28]
 8003c72:	9104      	str	r1, [sp, #16]
 8003c74:	4808      	ldr	r0, [pc, #32]	; (8003c98 <siprintf+0x38>)
 8003c76:	4909      	ldr	r1, [pc, #36]	; (8003c9c <siprintf+0x3c>)
 8003c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c7c:	9105      	str	r1, [sp, #20]
 8003c7e:	6800      	ldr	r0, [r0, #0]
 8003c80:	a902      	add	r1, sp, #8
 8003c82:	9301      	str	r3, [sp, #4]
 8003c84:	f000 f98e 	bl	8003fa4 <_svfiprintf_r>
 8003c88:	2200      	movs	r2, #0
 8003c8a:	9b02      	ldr	r3, [sp, #8]
 8003c8c:	701a      	strb	r2, [r3, #0]
 8003c8e:	b01c      	add	sp, #112	; 0x70
 8003c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c94:	b003      	add	sp, #12
 8003c96:	4770      	bx	lr
 8003c98:	20000058 	.word	0x20000058
 8003c9c:	ffff0208 	.word	0xffff0208

08003ca0 <memset>:
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	4402      	add	r2, r0
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d100      	bne.n	8003caa <memset+0xa>
 8003ca8:	4770      	bx	lr
 8003caa:	f803 1b01 	strb.w	r1, [r3], #1
 8003cae:	e7f9      	b.n	8003ca4 <memset+0x4>

08003cb0 <__errno>:
 8003cb0:	4b01      	ldr	r3, [pc, #4]	; (8003cb8 <__errno+0x8>)
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	20000058 	.word	0x20000058

08003cbc <__libc_init_array>:
 8003cbc:	b570      	push	{r4, r5, r6, lr}
 8003cbe:	2600      	movs	r6, #0
 8003cc0:	4d0c      	ldr	r5, [pc, #48]	; (8003cf4 <__libc_init_array+0x38>)
 8003cc2:	4c0d      	ldr	r4, [pc, #52]	; (8003cf8 <__libc_init_array+0x3c>)
 8003cc4:	1b64      	subs	r4, r4, r5
 8003cc6:	10a4      	asrs	r4, r4, #2
 8003cc8:	42a6      	cmp	r6, r4
 8003cca:	d109      	bne.n	8003ce0 <__libc_init_array+0x24>
 8003ccc:	f000 fc7a 	bl	80045c4 <_init>
 8003cd0:	2600      	movs	r6, #0
 8003cd2:	4d0a      	ldr	r5, [pc, #40]	; (8003cfc <__libc_init_array+0x40>)
 8003cd4:	4c0a      	ldr	r4, [pc, #40]	; (8003d00 <__libc_init_array+0x44>)
 8003cd6:	1b64      	subs	r4, r4, r5
 8003cd8:	10a4      	asrs	r4, r4, #2
 8003cda:	42a6      	cmp	r6, r4
 8003cdc:	d105      	bne.n	8003cea <__libc_init_array+0x2e>
 8003cde:	bd70      	pop	{r4, r5, r6, pc}
 8003ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce4:	4798      	blx	r3
 8003ce6:	3601      	adds	r6, #1
 8003ce8:	e7ee      	b.n	8003cc8 <__libc_init_array+0xc>
 8003cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cee:	4798      	blx	r3
 8003cf0:	3601      	adds	r6, #1
 8003cf2:	e7f2      	b.n	8003cda <__libc_init_array+0x1e>
 8003cf4:	08004650 	.word	0x08004650
 8003cf8:	08004650 	.word	0x08004650
 8003cfc:	08004650 	.word	0x08004650
 8003d00:	08004654 	.word	0x08004654

08003d04 <__retarget_lock_acquire_recursive>:
 8003d04:	4770      	bx	lr

08003d06 <__retarget_lock_release_recursive>:
 8003d06:	4770      	bx	lr

08003d08 <_free_r>:
 8003d08:	b538      	push	{r3, r4, r5, lr}
 8003d0a:	4605      	mov	r5, r0
 8003d0c:	2900      	cmp	r1, #0
 8003d0e:	d040      	beq.n	8003d92 <_free_r+0x8a>
 8003d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d14:	1f0c      	subs	r4, r1, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	bfb8      	it	lt
 8003d1a:	18e4      	addlt	r4, r4, r3
 8003d1c:	f000 f8dc 	bl	8003ed8 <__malloc_lock>
 8003d20:	4a1c      	ldr	r2, [pc, #112]	; (8003d94 <_free_r+0x8c>)
 8003d22:	6813      	ldr	r3, [r2, #0]
 8003d24:	b933      	cbnz	r3, 8003d34 <_free_r+0x2c>
 8003d26:	6063      	str	r3, [r4, #4]
 8003d28:	6014      	str	r4, [r2, #0]
 8003d2a:	4628      	mov	r0, r5
 8003d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d30:	f000 b8d8 	b.w	8003ee4 <__malloc_unlock>
 8003d34:	42a3      	cmp	r3, r4
 8003d36:	d908      	bls.n	8003d4a <_free_r+0x42>
 8003d38:	6820      	ldr	r0, [r4, #0]
 8003d3a:	1821      	adds	r1, r4, r0
 8003d3c:	428b      	cmp	r3, r1
 8003d3e:	bf01      	itttt	eq
 8003d40:	6819      	ldreq	r1, [r3, #0]
 8003d42:	685b      	ldreq	r3, [r3, #4]
 8003d44:	1809      	addeq	r1, r1, r0
 8003d46:	6021      	streq	r1, [r4, #0]
 8003d48:	e7ed      	b.n	8003d26 <_free_r+0x1e>
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	b10b      	cbz	r3, 8003d54 <_free_r+0x4c>
 8003d50:	42a3      	cmp	r3, r4
 8003d52:	d9fa      	bls.n	8003d4a <_free_r+0x42>
 8003d54:	6811      	ldr	r1, [r2, #0]
 8003d56:	1850      	adds	r0, r2, r1
 8003d58:	42a0      	cmp	r0, r4
 8003d5a:	d10b      	bne.n	8003d74 <_free_r+0x6c>
 8003d5c:	6820      	ldr	r0, [r4, #0]
 8003d5e:	4401      	add	r1, r0
 8003d60:	1850      	adds	r0, r2, r1
 8003d62:	4283      	cmp	r3, r0
 8003d64:	6011      	str	r1, [r2, #0]
 8003d66:	d1e0      	bne.n	8003d2a <_free_r+0x22>
 8003d68:	6818      	ldr	r0, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	4408      	add	r0, r1
 8003d6e:	6010      	str	r0, [r2, #0]
 8003d70:	6053      	str	r3, [r2, #4]
 8003d72:	e7da      	b.n	8003d2a <_free_r+0x22>
 8003d74:	d902      	bls.n	8003d7c <_free_r+0x74>
 8003d76:	230c      	movs	r3, #12
 8003d78:	602b      	str	r3, [r5, #0]
 8003d7a:	e7d6      	b.n	8003d2a <_free_r+0x22>
 8003d7c:	6820      	ldr	r0, [r4, #0]
 8003d7e:	1821      	adds	r1, r4, r0
 8003d80:	428b      	cmp	r3, r1
 8003d82:	bf01      	itttt	eq
 8003d84:	6819      	ldreq	r1, [r3, #0]
 8003d86:	685b      	ldreq	r3, [r3, #4]
 8003d88:	1809      	addeq	r1, r1, r0
 8003d8a:	6021      	streq	r1, [r4, #0]
 8003d8c:	6063      	str	r3, [r4, #4]
 8003d8e:	6054      	str	r4, [r2, #4]
 8003d90:	e7cb      	b.n	8003d2a <_free_r+0x22>
 8003d92:	bd38      	pop	{r3, r4, r5, pc}
 8003d94:	20000414 	.word	0x20000414

08003d98 <sbrk_aligned>:
 8003d98:	b570      	push	{r4, r5, r6, lr}
 8003d9a:	4e0e      	ldr	r6, [pc, #56]	; (8003dd4 <sbrk_aligned+0x3c>)
 8003d9c:	460c      	mov	r4, r1
 8003d9e:	6831      	ldr	r1, [r6, #0]
 8003da0:	4605      	mov	r5, r0
 8003da2:	b911      	cbnz	r1, 8003daa <sbrk_aligned+0x12>
 8003da4:	f000 fbaa 	bl	80044fc <_sbrk_r>
 8003da8:	6030      	str	r0, [r6, #0]
 8003daa:	4621      	mov	r1, r4
 8003dac:	4628      	mov	r0, r5
 8003dae:	f000 fba5 	bl	80044fc <_sbrk_r>
 8003db2:	1c43      	adds	r3, r0, #1
 8003db4:	d00a      	beq.n	8003dcc <sbrk_aligned+0x34>
 8003db6:	1cc4      	adds	r4, r0, #3
 8003db8:	f024 0403 	bic.w	r4, r4, #3
 8003dbc:	42a0      	cmp	r0, r4
 8003dbe:	d007      	beq.n	8003dd0 <sbrk_aligned+0x38>
 8003dc0:	1a21      	subs	r1, r4, r0
 8003dc2:	4628      	mov	r0, r5
 8003dc4:	f000 fb9a 	bl	80044fc <_sbrk_r>
 8003dc8:	3001      	adds	r0, #1
 8003dca:	d101      	bne.n	8003dd0 <sbrk_aligned+0x38>
 8003dcc:	f04f 34ff 	mov.w	r4, #4294967295
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	bd70      	pop	{r4, r5, r6, pc}
 8003dd4:	20000418 	.word	0x20000418

08003dd8 <_malloc_r>:
 8003dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ddc:	1ccd      	adds	r5, r1, #3
 8003dde:	f025 0503 	bic.w	r5, r5, #3
 8003de2:	3508      	adds	r5, #8
 8003de4:	2d0c      	cmp	r5, #12
 8003de6:	bf38      	it	cc
 8003de8:	250c      	movcc	r5, #12
 8003dea:	2d00      	cmp	r5, #0
 8003dec:	4607      	mov	r7, r0
 8003dee:	db01      	blt.n	8003df4 <_malloc_r+0x1c>
 8003df0:	42a9      	cmp	r1, r5
 8003df2:	d905      	bls.n	8003e00 <_malloc_r+0x28>
 8003df4:	230c      	movs	r3, #12
 8003df6:	2600      	movs	r6, #0
 8003df8:	603b      	str	r3, [r7, #0]
 8003dfa:	4630      	mov	r0, r6
 8003dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e00:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003ed4 <_malloc_r+0xfc>
 8003e04:	f000 f868 	bl	8003ed8 <__malloc_lock>
 8003e08:	f8d8 3000 	ldr.w	r3, [r8]
 8003e0c:	461c      	mov	r4, r3
 8003e0e:	bb5c      	cbnz	r4, 8003e68 <_malloc_r+0x90>
 8003e10:	4629      	mov	r1, r5
 8003e12:	4638      	mov	r0, r7
 8003e14:	f7ff ffc0 	bl	8003d98 <sbrk_aligned>
 8003e18:	1c43      	adds	r3, r0, #1
 8003e1a:	4604      	mov	r4, r0
 8003e1c:	d155      	bne.n	8003eca <_malloc_r+0xf2>
 8003e1e:	f8d8 4000 	ldr.w	r4, [r8]
 8003e22:	4626      	mov	r6, r4
 8003e24:	2e00      	cmp	r6, #0
 8003e26:	d145      	bne.n	8003eb4 <_malloc_r+0xdc>
 8003e28:	2c00      	cmp	r4, #0
 8003e2a:	d048      	beq.n	8003ebe <_malloc_r+0xe6>
 8003e2c:	6823      	ldr	r3, [r4, #0]
 8003e2e:	4631      	mov	r1, r6
 8003e30:	4638      	mov	r0, r7
 8003e32:	eb04 0903 	add.w	r9, r4, r3
 8003e36:	f000 fb61 	bl	80044fc <_sbrk_r>
 8003e3a:	4581      	cmp	r9, r0
 8003e3c:	d13f      	bne.n	8003ebe <_malloc_r+0xe6>
 8003e3e:	6821      	ldr	r1, [r4, #0]
 8003e40:	4638      	mov	r0, r7
 8003e42:	1a6d      	subs	r5, r5, r1
 8003e44:	4629      	mov	r1, r5
 8003e46:	f7ff ffa7 	bl	8003d98 <sbrk_aligned>
 8003e4a:	3001      	adds	r0, #1
 8003e4c:	d037      	beq.n	8003ebe <_malloc_r+0xe6>
 8003e4e:	6823      	ldr	r3, [r4, #0]
 8003e50:	442b      	add	r3, r5
 8003e52:	6023      	str	r3, [r4, #0]
 8003e54:	f8d8 3000 	ldr.w	r3, [r8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d038      	beq.n	8003ece <_malloc_r+0xf6>
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	42a2      	cmp	r2, r4
 8003e60:	d12b      	bne.n	8003eba <_malloc_r+0xe2>
 8003e62:	2200      	movs	r2, #0
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	e00f      	b.n	8003e88 <_malloc_r+0xb0>
 8003e68:	6822      	ldr	r2, [r4, #0]
 8003e6a:	1b52      	subs	r2, r2, r5
 8003e6c:	d41f      	bmi.n	8003eae <_malloc_r+0xd6>
 8003e6e:	2a0b      	cmp	r2, #11
 8003e70:	d917      	bls.n	8003ea2 <_malloc_r+0xca>
 8003e72:	1961      	adds	r1, r4, r5
 8003e74:	42a3      	cmp	r3, r4
 8003e76:	6025      	str	r5, [r4, #0]
 8003e78:	bf18      	it	ne
 8003e7a:	6059      	strne	r1, [r3, #4]
 8003e7c:	6863      	ldr	r3, [r4, #4]
 8003e7e:	bf08      	it	eq
 8003e80:	f8c8 1000 	streq.w	r1, [r8]
 8003e84:	5162      	str	r2, [r4, r5]
 8003e86:	604b      	str	r3, [r1, #4]
 8003e88:	4638      	mov	r0, r7
 8003e8a:	f104 060b 	add.w	r6, r4, #11
 8003e8e:	f000 f829 	bl	8003ee4 <__malloc_unlock>
 8003e92:	f026 0607 	bic.w	r6, r6, #7
 8003e96:	1d23      	adds	r3, r4, #4
 8003e98:	1af2      	subs	r2, r6, r3
 8003e9a:	d0ae      	beq.n	8003dfa <_malloc_r+0x22>
 8003e9c:	1b9b      	subs	r3, r3, r6
 8003e9e:	50a3      	str	r3, [r4, r2]
 8003ea0:	e7ab      	b.n	8003dfa <_malloc_r+0x22>
 8003ea2:	42a3      	cmp	r3, r4
 8003ea4:	6862      	ldr	r2, [r4, #4]
 8003ea6:	d1dd      	bne.n	8003e64 <_malloc_r+0x8c>
 8003ea8:	f8c8 2000 	str.w	r2, [r8]
 8003eac:	e7ec      	b.n	8003e88 <_malloc_r+0xb0>
 8003eae:	4623      	mov	r3, r4
 8003eb0:	6864      	ldr	r4, [r4, #4]
 8003eb2:	e7ac      	b.n	8003e0e <_malloc_r+0x36>
 8003eb4:	4634      	mov	r4, r6
 8003eb6:	6876      	ldr	r6, [r6, #4]
 8003eb8:	e7b4      	b.n	8003e24 <_malloc_r+0x4c>
 8003eba:	4613      	mov	r3, r2
 8003ebc:	e7cc      	b.n	8003e58 <_malloc_r+0x80>
 8003ebe:	230c      	movs	r3, #12
 8003ec0:	4638      	mov	r0, r7
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	f000 f80e 	bl	8003ee4 <__malloc_unlock>
 8003ec8:	e797      	b.n	8003dfa <_malloc_r+0x22>
 8003eca:	6025      	str	r5, [r4, #0]
 8003ecc:	e7dc      	b.n	8003e88 <_malloc_r+0xb0>
 8003ece:	605b      	str	r3, [r3, #4]
 8003ed0:	deff      	udf	#255	; 0xff
 8003ed2:	bf00      	nop
 8003ed4:	20000414 	.word	0x20000414

08003ed8 <__malloc_lock>:
 8003ed8:	4801      	ldr	r0, [pc, #4]	; (8003ee0 <__malloc_lock+0x8>)
 8003eda:	f7ff bf13 	b.w	8003d04 <__retarget_lock_acquire_recursive>
 8003ede:	bf00      	nop
 8003ee0:	20000410 	.word	0x20000410

08003ee4 <__malloc_unlock>:
 8003ee4:	4801      	ldr	r0, [pc, #4]	; (8003eec <__malloc_unlock+0x8>)
 8003ee6:	f7ff bf0e 	b.w	8003d06 <__retarget_lock_release_recursive>
 8003eea:	bf00      	nop
 8003eec:	20000410 	.word	0x20000410

08003ef0 <__ssputs_r>:
 8003ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef4:	461f      	mov	r7, r3
 8003ef6:	688e      	ldr	r6, [r1, #8]
 8003ef8:	4682      	mov	sl, r0
 8003efa:	42be      	cmp	r6, r7
 8003efc:	460c      	mov	r4, r1
 8003efe:	4690      	mov	r8, r2
 8003f00:	680b      	ldr	r3, [r1, #0]
 8003f02:	d82c      	bhi.n	8003f5e <__ssputs_r+0x6e>
 8003f04:	898a      	ldrh	r2, [r1, #12]
 8003f06:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f0a:	d026      	beq.n	8003f5a <__ssputs_r+0x6a>
 8003f0c:	6965      	ldr	r5, [r4, #20]
 8003f0e:	6909      	ldr	r1, [r1, #16]
 8003f10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f14:	eba3 0901 	sub.w	r9, r3, r1
 8003f18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f1c:	1c7b      	adds	r3, r7, #1
 8003f1e:	444b      	add	r3, r9
 8003f20:	106d      	asrs	r5, r5, #1
 8003f22:	429d      	cmp	r5, r3
 8003f24:	bf38      	it	cc
 8003f26:	461d      	movcc	r5, r3
 8003f28:	0553      	lsls	r3, r2, #21
 8003f2a:	d527      	bpl.n	8003f7c <__ssputs_r+0x8c>
 8003f2c:	4629      	mov	r1, r5
 8003f2e:	f7ff ff53 	bl	8003dd8 <_malloc_r>
 8003f32:	4606      	mov	r6, r0
 8003f34:	b360      	cbz	r0, 8003f90 <__ssputs_r+0xa0>
 8003f36:	464a      	mov	r2, r9
 8003f38:	6921      	ldr	r1, [r4, #16]
 8003f3a:	f000 fafd 	bl	8004538 <memcpy>
 8003f3e:	89a3      	ldrh	r3, [r4, #12]
 8003f40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f48:	81a3      	strh	r3, [r4, #12]
 8003f4a:	6126      	str	r6, [r4, #16]
 8003f4c:	444e      	add	r6, r9
 8003f4e:	6026      	str	r6, [r4, #0]
 8003f50:	463e      	mov	r6, r7
 8003f52:	6165      	str	r5, [r4, #20]
 8003f54:	eba5 0509 	sub.w	r5, r5, r9
 8003f58:	60a5      	str	r5, [r4, #8]
 8003f5a:	42be      	cmp	r6, r7
 8003f5c:	d900      	bls.n	8003f60 <__ssputs_r+0x70>
 8003f5e:	463e      	mov	r6, r7
 8003f60:	4632      	mov	r2, r6
 8003f62:	4641      	mov	r1, r8
 8003f64:	6820      	ldr	r0, [r4, #0]
 8003f66:	f000 faaf 	bl	80044c8 <memmove>
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	68a3      	ldr	r3, [r4, #8]
 8003f6e:	1b9b      	subs	r3, r3, r6
 8003f70:	60a3      	str	r3, [r4, #8]
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	4433      	add	r3, r6
 8003f76:	6023      	str	r3, [r4, #0]
 8003f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f7c:	462a      	mov	r2, r5
 8003f7e:	f000 fae9 	bl	8004554 <_realloc_r>
 8003f82:	4606      	mov	r6, r0
 8003f84:	2800      	cmp	r0, #0
 8003f86:	d1e0      	bne.n	8003f4a <__ssputs_r+0x5a>
 8003f88:	4650      	mov	r0, sl
 8003f8a:	6921      	ldr	r1, [r4, #16]
 8003f8c:	f7ff febc 	bl	8003d08 <_free_r>
 8003f90:	230c      	movs	r3, #12
 8003f92:	f8ca 3000 	str.w	r3, [sl]
 8003f96:	89a3      	ldrh	r3, [r4, #12]
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fa0:	81a3      	strh	r3, [r4, #12]
 8003fa2:	e7e9      	b.n	8003f78 <__ssputs_r+0x88>

08003fa4 <_svfiprintf_r>:
 8003fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa8:	4698      	mov	r8, r3
 8003faa:	898b      	ldrh	r3, [r1, #12]
 8003fac:	4607      	mov	r7, r0
 8003fae:	061b      	lsls	r3, r3, #24
 8003fb0:	460d      	mov	r5, r1
 8003fb2:	4614      	mov	r4, r2
 8003fb4:	b09d      	sub	sp, #116	; 0x74
 8003fb6:	d50e      	bpl.n	8003fd6 <_svfiprintf_r+0x32>
 8003fb8:	690b      	ldr	r3, [r1, #16]
 8003fba:	b963      	cbnz	r3, 8003fd6 <_svfiprintf_r+0x32>
 8003fbc:	2140      	movs	r1, #64	; 0x40
 8003fbe:	f7ff ff0b 	bl	8003dd8 <_malloc_r>
 8003fc2:	6028      	str	r0, [r5, #0]
 8003fc4:	6128      	str	r0, [r5, #16]
 8003fc6:	b920      	cbnz	r0, 8003fd2 <_svfiprintf_r+0x2e>
 8003fc8:	230c      	movs	r3, #12
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd0:	e0d0      	b.n	8004174 <_svfiprintf_r+0x1d0>
 8003fd2:	2340      	movs	r3, #64	; 0x40
 8003fd4:	616b      	str	r3, [r5, #20]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8003fda:	2320      	movs	r3, #32
 8003fdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fe0:	2330      	movs	r3, #48	; 0x30
 8003fe2:	f04f 0901 	mov.w	r9, #1
 8003fe6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fea:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800418c <_svfiprintf_r+0x1e8>
 8003fee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ff2:	4623      	mov	r3, r4
 8003ff4:	469a      	mov	sl, r3
 8003ff6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ffa:	b10a      	cbz	r2, 8004000 <_svfiprintf_r+0x5c>
 8003ffc:	2a25      	cmp	r2, #37	; 0x25
 8003ffe:	d1f9      	bne.n	8003ff4 <_svfiprintf_r+0x50>
 8004000:	ebba 0b04 	subs.w	fp, sl, r4
 8004004:	d00b      	beq.n	800401e <_svfiprintf_r+0x7a>
 8004006:	465b      	mov	r3, fp
 8004008:	4622      	mov	r2, r4
 800400a:	4629      	mov	r1, r5
 800400c:	4638      	mov	r0, r7
 800400e:	f7ff ff6f 	bl	8003ef0 <__ssputs_r>
 8004012:	3001      	adds	r0, #1
 8004014:	f000 80a9 	beq.w	800416a <_svfiprintf_r+0x1c6>
 8004018:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800401a:	445a      	add	r2, fp
 800401c:	9209      	str	r2, [sp, #36]	; 0x24
 800401e:	f89a 3000 	ldrb.w	r3, [sl]
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 80a1 	beq.w	800416a <_svfiprintf_r+0x1c6>
 8004028:	2300      	movs	r3, #0
 800402a:	f04f 32ff 	mov.w	r2, #4294967295
 800402e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004032:	f10a 0a01 	add.w	sl, sl, #1
 8004036:	9304      	str	r3, [sp, #16]
 8004038:	9307      	str	r3, [sp, #28]
 800403a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800403e:	931a      	str	r3, [sp, #104]	; 0x68
 8004040:	4654      	mov	r4, sl
 8004042:	2205      	movs	r2, #5
 8004044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004048:	4850      	ldr	r0, [pc, #320]	; (800418c <_svfiprintf_r+0x1e8>)
 800404a:	f000 fa67 	bl	800451c <memchr>
 800404e:	9a04      	ldr	r2, [sp, #16]
 8004050:	b9d8      	cbnz	r0, 800408a <_svfiprintf_r+0xe6>
 8004052:	06d0      	lsls	r0, r2, #27
 8004054:	bf44      	itt	mi
 8004056:	2320      	movmi	r3, #32
 8004058:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800405c:	0711      	lsls	r1, r2, #28
 800405e:	bf44      	itt	mi
 8004060:	232b      	movmi	r3, #43	; 0x2b
 8004062:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004066:	f89a 3000 	ldrb.w	r3, [sl]
 800406a:	2b2a      	cmp	r3, #42	; 0x2a
 800406c:	d015      	beq.n	800409a <_svfiprintf_r+0xf6>
 800406e:	4654      	mov	r4, sl
 8004070:	2000      	movs	r0, #0
 8004072:	f04f 0c0a 	mov.w	ip, #10
 8004076:	9a07      	ldr	r2, [sp, #28]
 8004078:	4621      	mov	r1, r4
 800407a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800407e:	3b30      	subs	r3, #48	; 0x30
 8004080:	2b09      	cmp	r3, #9
 8004082:	d94d      	bls.n	8004120 <_svfiprintf_r+0x17c>
 8004084:	b1b0      	cbz	r0, 80040b4 <_svfiprintf_r+0x110>
 8004086:	9207      	str	r2, [sp, #28]
 8004088:	e014      	b.n	80040b4 <_svfiprintf_r+0x110>
 800408a:	eba0 0308 	sub.w	r3, r0, r8
 800408e:	fa09 f303 	lsl.w	r3, r9, r3
 8004092:	4313      	orrs	r3, r2
 8004094:	46a2      	mov	sl, r4
 8004096:	9304      	str	r3, [sp, #16]
 8004098:	e7d2      	b.n	8004040 <_svfiprintf_r+0x9c>
 800409a:	9b03      	ldr	r3, [sp, #12]
 800409c:	1d19      	adds	r1, r3, #4
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	9103      	str	r1, [sp, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	bfbb      	ittet	lt
 80040a6:	425b      	neglt	r3, r3
 80040a8:	f042 0202 	orrlt.w	r2, r2, #2
 80040ac:	9307      	strge	r3, [sp, #28]
 80040ae:	9307      	strlt	r3, [sp, #28]
 80040b0:	bfb8      	it	lt
 80040b2:	9204      	strlt	r2, [sp, #16]
 80040b4:	7823      	ldrb	r3, [r4, #0]
 80040b6:	2b2e      	cmp	r3, #46	; 0x2e
 80040b8:	d10c      	bne.n	80040d4 <_svfiprintf_r+0x130>
 80040ba:	7863      	ldrb	r3, [r4, #1]
 80040bc:	2b2a      	cmp	r3, #42	; 0x2a
 80040be:	d134      	bne.n	800412a <_svfiprintf_r+0x186>
 80040c0:	9b03      	ldr	r3, [sp, #12]
 80040c2:	3402      	adds	r4, #2
 80040c4:	1d1a      	adds	r2, r3, #4
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	9203      	str	r2, [sp, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	bfb8      	it	lt
 80040ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80040d2:	9305      	str	r3, [sp, #20]
 80040d4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004190 <_svfiprintf_r+0x1ec>
 80040d8:	2203      	movs	r2, #3
 80040da:	4650      	mov	r0, sl
 80040dc:	7821      	ldrb	r1, [r4, #0]
 80040de:	f000 fa1d 	bl	800451c <memchr>
 80040e2:	b138      	cbz	r0, 80040f4 <_svfiprintf_r+0x150>
 80040e4:	2240      	movs	r2, #64	; 0x40
 80040e6:	9b04      	ldr	r3, [sp, #16]
 80040e8:	eba0 000a 	sub.w	r0, r0, sl
 80040ec:	4082      	lsls	r2, r0
 80040ee:	4313      	orrs	r3, r2
 80040f0:	3401      	adds	r4, #1
 80040f2:	9304      	str	r3, [sp, #16]
 80040f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040f8:	2206      	movs	r2, #6
 80040fa:	4826      	ldr	r0, [pc, #152]	; (8004194 <_svfiprintf_r+0x1f0>)
 80040fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004100:	f000 fa0c 	bl	800451c <memchr>
 8004104:	2800      	cmp	r0, #0
 8004106:	d038      	beq.n	800417a <_svfiprintf_r+0x1d6>
 8004108:	4b23      	ldr	r3, [pc, #140]	; (8004198 <_svfiprintf_r+0x1f4>)
 800410a:	bb1b      	cbnz	r3, 8004154 <_svfiprintf_r+0x1b0>
 800410c:	9b03      	ldr	r3, [sp, #12]
 800410e:	3307      	adds	r3, #7
 8004110:	f023 0307 	bic.w	r3, r3, #7
 8004114:	3308      	adds	r3, #8
 8004116:	9303      	str	r3, [sp, #12]
 8004118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800411a:	4433      	add	r3, r6
 800411c:	9309      	str	r3, [sp, #36]	; 0x24
 800411e:	e768      	b.n	8003ff2 <_svfiprintf_r+0x4e>
 8004120:	460c      	mov	r4, r1
 8004122:	2001      	movs	r0, #1
 8004124:	fb0c 3202 	mla	r2, ip, r2, r3
 8004128:	e7a6      	b.n	8004078 <_svfiprintf_r+0xd4>
 800412a:	2300      	movs	r3, #0
 800412c:	f04f 0c0a 	mov.w	ip, #10
 8004130:	4619      	mov	r1, r3
 8004132:	3401      	adds	r4, #1
 8004134:	9305      	str	r3, [sp, #20]
 8004136:	4620      	mov	r0, r4
 8004138:	f810 2b01 	ldrb.w	r2, [r0], #1
 800413c:	3a30      	subs	r2, #48	; 0x30
 800413e:	2a09      	cmp	r2, #9
 8004140:	d903      	bls.n	800414a <_svfiprintf_r+0x1a6>
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0c6      	beq.n	80040d4 <_svfiprintf_r+0x130>
 8004146:	9105      	str	r1, [sp, #20]
 8004148:	e7c4      	b.n	80040d4 <_svfiprintf_r+0x130>
 800414a:	4604      	mov	r4, r0
 800414c:	2301      	movs	r3, #1
 800414e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004152:	e7f0      	b.n	8004136 <_svfiprintf_r+0x192>
 8004154:	ab03      	add	r3, sp, #12
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	462a      	mov	r2, r5
 800415a:	4638      	mov	r0, r7
 800415c:	4b0f      	ldr	r3, [pc, #60]	; (800419c <_svfiprintf_r+0x1f8>)
 800415e:	a904      	add	r1, sp, #16
 8004160:	f3af 8000 	nop.w
 8004164:	1c42      	adds	r2, r0, #1
 8004166:	4606      	mov	r6, r0
 8004168:	d1d6      	bne.n	8004118 <_svfiprintf_r+0x174>
 800416a:	89ab      	ldrh	r3, [r5, #12]
 800416c:	065b      	lsls	r3, r3, #25
 800416e:	f53f af2d 	bmi.w	8003fcc <_svfiprintf_r+0x28>
 8004172:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004174:	b01d      	add	sp, #116	; 0x74
 8004176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800417a:	ab03      	add	r3, sp, #12
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	462a      	mov	r2, r5
 8004180:	4638      	mov	r0, r7
 8004182:	4b06      	ldr	r3, [pc, #24]	; (800419c <_svfiprintf_r+0x1f8>)
 8004184:	a904      	add	r1, sp, #16
 8004186:	f000 f87d 	bl	8004284 <_printf_i>
 800418a:	e7eb      	b.n	8004164 <_svfiprintf_r+0x1c0>
 800418c:	0800461a 	.word	0x0800461a
 8004190:	08004620 	.word	0x08004620
 8004194:	08004624 	.word	0x08004624
 8004198:	00000000 	.word	0x00000000
 800419c:	08003ef1 	.word	0x08003ef1

080041a0 <_printf_common>:
 80041a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041a4:	4616      	mov	r6, r2
 80041a6:	4699      	mov	r9, r3
 80041a8:	688a      	ldr	r2, [r1, #8]
 80041aa:	690b      	ldr	r3, [r1, #16]
 80041ac:	4607      	mov	r7, r0
 80041ae:	4293      	cmp	r3, r2
 80041b0:	bfb8      	it	lt
 80041b2:	4613      	movlt	r3, r2
 80041b4:	6033      	str	r3, [r6, #0]
 80041b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041ba:	460c      	mov	r4, r1
 80041bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041c0:	b10a      	cbz	r2, 80041c6 <_printf_common+0x26>
 80041c2:	3301      	adds	r3, #1
 80041c4:	6033      	str	r3, [r6, #0]
 80041c6:	6823      	ldr	r3, [r4, #0]
 80041c8:	0699      	lsls	r1, r3, #26
 80041ca:	bf42      	ittt	mi
 80041cc:	6833      	ldrmi	r3, [r6, #0]
 80041ce:	3302      	addmi	r3, #2
 80041d0:	6033      	strmi	r3, [r6, #0]
 80041d2:	6825      	ldr	r5, [r4, #0]
 80041d4:	f015 0506 	ands.w	r5, r5, #6
 80041d8:	d106      	bne.n	80041e8 <_printf_common+0x48>
 80041da:	f104 0a19 	add.w	sl, r4, #25
 80041de:	68e3      	ldr	r3, [r4, #12]
 80041e0:	6832      	ldr	r2, [r6, #0]
 80041e2:	1a9b      	subs	r3, r3, r2
 80041e4:	42ab      	cmp	r3, r5
 80041e6:	dc2b      	bgt.n	8004240 <_printf_common+0xa0>
 80041e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041ec:	1e13      	subs	r3, r2, #0
 80041ee:	6822      	ldr	r2, [r4, #0]
 80041f0:	bf18      	it	ne
 80041f2:	2301      	movne	r3, #1
 80041f4:	0692      	lsls	r2, r2, #26
 80041f6:	d430      	bmi.n	800425a <_printf_common+0xba>
 80041f8:	4649      	mov	r1, r9
 80041fa:	4638      	mov	r0, r7
 80041fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004200:	47c0      	blx	r8
 8004202:	3001      	adds	r0, #1
 8004204:	d023      	beq.n	800424e <_printf_common+0xae>
 8004206:	6823      	ldr	r3, [r4, #0]
 8004208:	6922      	ldr	r2, [r4, #16]
 800420a:	f003 0306 	and.w	r3, r3, #6
 800420e:	2b04      	cmp	r3, #4
 8004210:	bf14      	ite	ne
 8004212:	2500      	movne	r5, #0
 8004214:	6833      	ldreq	r3, [r6, #0]
 8004216:	f04f 0600 	mov.w	r6, #0
 800421a:	bf08      	it	eq
 800421c:	68e5      	ldreq	r5, [r4, #12]
 800421e:	f104 041a 	add.w	r4, r4, #26
 8004222:	bf08      	it	eq
 8004224:	1aed      	subeq	r5, r5, r3
 8004226:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800422a:	bf08      	it	eq
 800422c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004230:	4293      	cmp	r3, r2
 8004232:	bfc4      	itt	gt
 8004234:	1a9b      	subgt	r3, r3, r2
 8004236:	18ed      	addgt	r5, r5, r3
 8004238:	42b5      	cmp	r5, r6
 800423a:	d11a      	bne.n	8004272 <_printf_common+0xd2>
 800423c:	2000      	movs	r0, #0
 800423e:	e008      	b.n	8004252 <_printf_common+0xb2>
 8004240:	2301      	movs	r3, #1
 8004242:	4652      	mov	r2, sl
 8004244:	4649      	mov	r1, r9
 8004246:	4638      	mov	r0, r7
 8004248:	47c0      	blx	r8
 800424a:	3001      	adds	r0, #1
 800424c:	d103      	bne.n	8004256 <_printf_common+0xb6>
 800424e:	f04f 30ff 	mov.w	r0, #4294967295
 8004252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004256:	3501      	adds	r5, #1
 8004258:	e7c1      	b.n	80041de <_printf_common+0x3e>
 800425a:	2030      	movs	r0, #48	; 0x30
 800425c:	18e1      	adds	r1, r4, r3
 800425e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004268:	4422      	add	r2, r4
 800426a:	3302      	adds	r3, #2
 800426c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004270:	e7c2      	b.n	80041f8 <_printf_common+0x58>
 8004272:	2301      	movs	r3, #1
 8004274:	4622      	mov	r2, r4
 8004276:	4649      	mov	r1, r9
 8004278:	4638      	mov	r0, r7
 800427a:	47c0      	blx	r8
 800427c:	3001      	adds	r0, #1
 800427e:	d0e6      	beq.n	800424e <_printf_common+0xae>
 8004280:	3601      	adds	r6, #1
 8004282:	e7d9      	b.n	8004238 <_printf_common+0x98>

08004284 <_printf_i>:
 8004284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004288:	7e0f      	ldrb	r7, [r1, #24]
 800428a:	4691      	mov	r9, r2
 800428c:	2f78      	cmp	r7, #120	; 0x78
 800428e:	4680      	mov	r8, r0
 8004290:	460c      	mov	r4, r1
 8004292:	469a      	mov	sl, r3
 8004294:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004296:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800429a:	d807      	bhi.n	80042ac <_printf_i+0x28>
 800429c:	2f62      	cmp	r7, #98	; 0x62
 800429e:	d80a      	bhi.n	80042b6 <_printf_i+0x32>
 80042a0:	2f00      	cmp	r7, #0
 80042a2:	f000 80d5 	beq.w	8004450 <_printf_i+0x1cc>
 80042a6:	2f58      	cmp	r7, #88	; 0x58
 80042a8:	f000 80c1 	beq.w	800442e <_printf_i+0x1aa>
 80042ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042b4:	e03a      	b.n	800432c <_printf_i+0xa8>
 80042b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042ba:	2b15      	cmp	r3, #21
 80042bc:	d8f6      	bhi.n	80042ac <_printf_i+0x28>
 80042be:	a101      	add	r1, pc, #4	; (adr r1, 80042c4 <_printf_i+0x40>)
 80042c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042c4:	0800431d 	.word	0x0800431d
 80042c8:	08004331 	.word	0x08004331
 80042cc:	080042ad 	.word	0x080042ad
 80042d0:	080042ad 	.word	0x080042ad
 80042d4:	080042ad 	.word	0x080042ad
 80042d8:	080042ad 	.word	0x080042ad
 80042dc:	08004331 	.word	0x08004331
 80042e0:	080042ad 	.word	0x080042ad
 80042e4:	080042ad 	.word	0x080042ad
 80042e8:	080042ad 	.word	0x080042ad
 80042ec:	080042ad 	.word	0x080042ad
 80042f0:	08004437 	.word	0x08004437
 80042f4:	0800435d 	.word	0x0800435d
 80042f8:	080043f1 	.word	0x080043f1
 80042fc:	080042ad 	.word	0x080042ad
 8004300:	080042ad 	.word	0x080042ad
 8004304:	08004459 	.word	0x08004459
 8004308:	080042ad 	.word	0x080042ad
 800430c:	0800435d 	.word	0x0800435d
 8004310:	080042ad 	.word	0x080042ad
 8004314:	080042ad 	.word	0x080042ad
 8004318:	080043f9 	.word	0x080043f9
 800431c:	682b      	ldr	r3, [r5, #0]
 800431e:	1d1a      	adds	r2, r3, #4
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	602a      	str	r2, [r5, #0]
 8004324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800432c:	2301      	movs	r3, #1
 800432e:	e0a0      	b.n	8004472 <_printf_i+0x1ee>
 8004330:	6820      	ldr	r0, [r4, #0]
 8004332:	682b      	ldr	r3, [r5, #0]
 8004334:	0607      	lsls	r7, r0, #24
 8004336:	f103 0104 	add.w	r1, r3, #4
 800433a:	6029      	str	r1, [r5, #0]
 800433c:	d501      	bpl.n	8004342 <_printf_i+0xbe>
 800433e:	681e      	ldr	r6, [r3, #0]
 8004340:	e003      	b.n	800434a <_printf_i+0xc6>
 8004342:	0646      	lsls	r6, r0, #25
 8004344:	d5fb      	bpl.n	800433e <_printf_i+0xba>
 8004346:	f9b3 6000 	ldrsh.w	r6, [r3]
 800434a:	2e00      	cmp	r6, #0
 800434c:	da03      	bge.n	8004356 <_printf_i+0xd2>
 800434e:	232d      	movs	r3, #45	; 0x2d
 8004350:	4276      	negs	r6, r6
 8004352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004356:	230a      	movs	r3, #10
 8004358:	4859      	ldr	r0, [pc, #356]	; (80044c0 <_printf_i+0x23c>)
 800435a:	e012      	b.n	8004382 <_printf_i+0xfe>
 800435c:	682b      	ldr	r3, [r5, #0]
 800435e:	6820      	ldr	r0, [r4, #0]
 8004360:	1d19      	adds	r1, r3, #4
 8004362:	6029      	str	r1, [r5, #0]
 8004364:	0605      	lsls	r5, r0, #24
 8004366:	d501      	bpl.n	800436c <_printf_i+0xe8>
 8004368:	681e      	ldr	r6, [r3, #0]
 800436a:	e002      	b.n	8004372 <_printf_i+0xee>
 800436c:	0641      	lsls	r1, r0, #25
 800436e:	d5fb      	bpl.n	8004368 <_printf_i+0xe4>
 8004370:	881e      	ldrh	r6, [r3, #0]
 8004372:	2f6f      	cmp	r7, #111	; 0x6f
 8004374:	bf0c      	ite	eq
 8004376:	2308      	moveq	r3, #8
 8004378:	230a      	movne	r3, #10
 800437a:	4851      	ldr	r0, [pc, #324]	; (80044c0 <_printf_i+0x23c>)
 800437c:	2100      	movs	r1, #0
 800437e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004382:	6865      	ldr	r5, [r4, #4]
 8004384:	2d00      	cmp	r5, #0
 8004386:	bfa8      	it	ge
 8004388:	6821      	ldrge	r1, [r4, #0]
 800438a:	60a5      	str	r5, [r4, #8]
 800438c:	bfa4      	itt	ge
 800438e:	f021 0104 	bicge.w	r1, r1, #4
 8004392:	6021      	strge	r1, [r4, #0]
 8004394:	b90e      	cbnz	r6, 800439a <_printf_i+0x116>
 8004396:	2d00      	cmp	r5, #0
 8004398:	d04b      	beq.n	8004432 <_printf_i+0x1ae>
 800439a:	4615      	mov	r5, r2
 800439c:	fbb6 f1f3 	udiv	r1, r6, r3
 80043a0:	fb03 6711 	mls	r7, r3, r1, r6
 80043a4:	5dc7      	ldrb	r7, [r0, r7]
 80043a6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043aa:	4637      	mov	r7, r6
 80043ac:	42bb      	cmp	r3, r7
 80043ae:	460e      	mov	r6, r1
 80043b0:	d9f4      	bls.n	800439c <_printf_i+0x118>
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d10b      	bne.n	80043ce <_printf_i+0x14a>
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	07de      	lsls	r6, r3, #31
 80043ba:	d508      	bpl.n	80043ce <_printf_i+0x14a>
 80043bc:	6923      	ldr	r3, [r4, #16]
 80043be:	6861      	ldr	r1, [r4, #4]
 80043c0:	4299      	cmp	r1, r3
 80043c2:	bfde      	ittt	le
 80043c4:	2330      	movle	r3, #48	; 0x30
 80043c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043ce:	1b52      	subs	r2, r2, r5
 80043d0:	6122      	str	r2, [r4, #16]
 80043d2:	464b      	mov	r3, r9
 80043d4:	4621      	mov	r1, r4
 80043d6:	4640      	mov	r0, r8
 80043d8:	f8cd a000 	str.w	sl, [sp]
 80043dc:	aa03      	add	r2, sp, #12
 80043de:	f7ff fedf 	bl	80041a0 <_printf_common>
 80043e2:	3001      	adds	r0, #1
 80043e4:	d14a      	bne.n	800447c <_printf_i+0x1f8>
 80043e6:	f04f 30ff 	mov.w	r0, #4294967295
 80043ea:	b004      	add	sp, #16
 80043ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	f043 0320 	orr.w	r3, r3, #32
 80043f6:	6023      	str	r3, [r4, #0]
 80043f8:	2778      	movs	r7, #120	; 0x78
 80043fa:	4832      	ldr	r0, [pc, #200]	; (80044c4 <_printf_i+0x240>)
 80043fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	6829      	ldr	r1, [r5, #0]
 8004404:	061f      	lsls	r7, r3, #24
 8004406:	f851 6b04 	ldr.w	r6, [r1], #4
 800440a:	d402      	bmi.n	8004412 <_printf_i+0x18e>
 800440c:	065f      	lsls	r7, r3, #25
 800440e:	bf48      	it	mi
 8004410:	b2b6      	uxthmi	r6, r6
 8004412:	07df      	lsls	r7, r3, #31
 8004414:	bf48      	it	mi
 8004416:	f043 0320 	orrmi.w	r3, r3, #32
 800441a:	6029      	str	r1, [r5, #0]
 800441c:	bf48      	it	mi
 800441e:	6023      	strmi	r3, [r4, #0]
 8004420:	b91e      	cbnz	r6, 800442a <_printf_i+0x1a6>
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	f023 0320 	bic.w	r3, r3, #32
 8004428:	6023      	str	r3, [r4, #0]
 800442a:	2310      	movs	r3, #16
 800442c:	e7a6      	b.n	800437c <_printf_i+0xf8>
 800442e:	4824      	ldr	r0, [pc, #144]	; (80044c0 <_printf_i+0x23c>)
 8004430:	e7e4      	b.n	80043fc <_printf_i+0x178>
 8004432:	4615      	mov	r5, r2
 8004434:	e7bd      	b.n	80043b2 <_printf_i+0x12e>
 8004436:	682b      	ldr	r3, [r5, #0]
 8004438:	6826      	ldr	r6, [r4, #0]
 800443a:	1d18      	adds	r0, r3, #4
 800443c:	6961      	ldr	r1, [r4, #20]
 800443e:	6028      	str	r0, [r5, #0]
 8004440:	0635      	lsls	r5, r6, #24
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	d501      	bpl.n	800444a <_printf_i+0x1c6>
 8004446:	6019      	str	r1, [r3, #0]
 8004448:	e002      	b.n	8004450 <_printf_i+0x1cc>
 800444a:	0670      	lsls	r0, r6, #25
 800444c:	d5fb      	bpl.n	8004446 <_printf_i+0x1c2>
 800444e:	8019      	strh	r1, [r3, #0]
 8004450:	2300      	movs	r3, #0
 8004452:	4615      	mov	r5, r2
 8004454:	6123      	str	r3, [r4, #16]
 8004456:	e7bc      	b.n	80043d2 <_printf_i+0x14e>
 8004458:	682b      	ldr	r3, [r5, #0]
 800445a:	2100      	movs	r1, #0
 800445c:	1d1a      	adds	r2, r3, #4
 800445e:	602a      	str	r2, [r5, #0]
 8004460:	681d      	ldr	r5, [r3, #0]
 8004462:	6862      	ldr	r2, [r4, #4]
 8004464:	4628      	mov	r0, r5
 8004466:	f000 f859 	bl	800451c <memchr>
 800446a:	b108      	cbz	r0, 8004470 <_printf_i+0x1ec>
 800446c:	1b40      	subs	r0, r0, r5
 800446e:	6060      	str	r0, [r4, #4]
 8004470:	6863      	ldr	r3, [r4, #4]
 8004472:	6123      	str	r3, [r4, #16]
 8004474:	2300      	movs	r3, #0
 8004476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800447a:	e7aa      	b.n	80043d2 <_printf_i+0x14e>
 800447c:	462a      	mov	r2, r5
 800447e:	4649      	mov	r1, r9
 8004480:	4640      	mov	r0, r8
 8004482:	6923      	ldr	r3, [r4, #16]
 8004484:	47d0      	blx	sl
 8004486:	3001      	adds	r0, #1
 8004488:	d0ad      	beq.n	80043e6 <_printf_i+0x162>
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	079b      	lsls	r3, r3, #30
 800448e:	d413      	bmi.n	80044b8 <_printf_i+0x234>
 8004490:	68e0      	ldr	r0, [r4, #12]
 8004492:	9b03      	ldr	r3, [sp, #12]
 8004494:	4298      	cmp	r0, r3
 8004496:	bfb8      	it	lt
 8004498:	4618      	movlt	r0, r3
 800449a:	e7a6      	b.n	80043ea <_printf_i+0x166>
 800449c:	2301      	movs	r3, #1
 800449e:	4632      	mov	r2, r6
 80044a0:	4649      	mov	r1, r9
 80044a2:	4640      	mov	r0, r8
 80044a4:	47d0      	blx	sl
 80044a6:	3001      	adds	r0, #1
 80044a8:	d09d      	beq.n	80043e6 <_printf_i+0x162>
 80044aa:	3501      	adds	r5, #1
 80044ac:	68e3      	ldr	r3, [r4, #12]
 80044ae:	9903      	ldr	r1, [sp, #12]
 80044b0:	1a5b      	subs	r3, r3, r1
 80044b2:	42ab      	cmp	r3, r5
 80044b4:	dcf2      	bgt.n	800449c <_printf_i+0x218>
 80044b6:	e7eb      	b.n	8004490 <_printf_i+0x20c>
 80044b8:	2500      	movs	r5, #0
 80044ba:	f104 0619 	add.w	r6, r4, #25
 80044be:	e7f5      	b.n	80044ac <_printf_i+0x228>
 80044c0:	0800462b 	.word	0x0800462b
 80044c4:	0800463c 	.word	0x0800463c

080044c8 <memmove>:
 80044c8:	4288      	cmp	r0, r1
 80044ca:	b510      	push	{r4, lr}
 80044cc:	eb01 0402 	add.w	r4, r1, r2
 80044d0:	d902      	bls.n	80044d8 <memmove+0x10>
 80044d2:	4284      	cmp	r4, r0
 80044d4:	4623      	mov	r3, r4
 80044d6:	d807      	bhi.n	80044e8 <memmove+0x20>
 80044d8:	1e43      	subs	r3, r0, #1
 80044da:	42a1      	cmp	r1, r4
 80044dc:	d008      	beq.n	80044f0 <memmove+0x28>
 80044de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044e6:	e7f8      	b.n	80044da <memmove+0x12>
 80044e8:	4601      	mov	r1, r0
 80044ea:	4402      	add	r2, r0
 80044ec:	428a      	cmp	r2, r1
 80044ee:	d100      	bne.n	80044f2 <memmove+0x2a>
 80044f0:	bd10      	pop	{r4, pc}
 80044f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044fa:	e7f7      	b.n	80044ec <memmove+0x24>

080044fc <_sbrk_r>:
 80044fc:	b538      	push	{r3, r4, r5, lr}
 80044fe:	2300      	movs	r3, #0
 8004500:	4d05      	ldr	r5, [pc, #20]	; (8004518 <_sbrk_r+0x1c>)
 8004502:	4604      	mov	r4, r0
 8004504:	4608      	mov	r0, r1
 8004506:	602b      	str	r3, [r5, #0]
 8004508:	f7fc fce4 	bl	8000ed4 <_sbrk>
 800450c:	1c43      	adds	r3, r0, #1
 800450e:	d102      	bne.n	8004516 <_sbrk_r+0x1a>
 8004510:	682b      	ldr	r3, [r5, #0]
 8004512:	b103      	cbz	r3, 8004516 <_sbrk_r+0x1a>
 8004514:	6023      	str	r3, [r4, #0]
 8004516:	bd38      	pop	{r3, r4, r5, pc}
 8004518:	2000040c 	.word	0x2000040c

0800451c <memchr>:
 800451c:	4603      	mov	r3, r0
 800451e:	b510      	push	{r4, lr}
 8004520:	b2c9      	uxtb	r1, r1
 8004522:	4402      	add	r2, r0
 8004524:	4293      	cmp	r3, r2
 8004526:	4618      	mov	r0, r3
 8004528:	d101      	bne.n	800452e <memchr+0x12>
 800452a:	2000      	movs	r0, #0
 800452c:	e003      	b.n	8004536 <memchr+0x1a>
 800452e:	7804      	ldrb	r4, [r0, #0]
 8004530:	3301      	adds	r3, #1
 8004532:	428c      	cmp	r4, r1
 8004534:	d1f6      	bne.n	8004524 <memchr+0x8>
 8004536:	bd10      	pop	{r4, pc}

08004538 <memcpy>:
 8004538:	440a      	add	r2, r1
 800453a:	4291      	cmp	r1, r2
 800453c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004540:	d100      	bne.n	8004544 <memcpy+0xc>
 8004542:	4770      	bx	lr
 8004544:	b510      	push	{r4, lr}
 8004546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800454a:	4291      	cmp	r1, r2
 800454c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004550:	d1f9      	bne.n	8004546 <memcpy+0xe>
 8004552:	bd10      	pop	{r4, pc}

08004554 <_realloc_r>:
 8004554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004558:	4680      	mov	r8, r0
 800455a:	4614      	mov	r4, r2
 800455c:	460e      	mov	r6, r1
 800455e:	b921      	cbnz	r1, 800456a <_realloc_r+0x16>
 8004560:	4611      	mov	r1, r2
 8004562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004566:	f7ff bc37 	b.w	8003dd8 <_malloc_r>
 800456a:	b92a      	cbnz	r2, 8004578 <_realloc_r+0x24>
 800456c:	f7ff fbcc 	bl	8003d08 <_free_r>
 8004570:	4625      	mov	r5, r4
 8004572:	4628      	mov	r0, r5
 8004574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004578:	f000 f81b 	bl	80045b2 <_malloc_usable_size_r>
 800457c:	4284      	cmp	r4, r0
 800457e:	4607      	mov	r7, r0
 8004580:	d802      	bhi.n	8004588 <_realloc_r+0x34>
 8004582:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004586:	d812      	bhi.n	80045ae <_realloc_r+0x5a>
 8004588:	4621      	mov	r1, r4
 800458a:	4640      	mov	r0, r8
 800458c:	f7ff fc24 	bl	8003dd8 <_malloc_r>
 8004590:	4605      	mov	r5, r0
 8004592:	2800      	cmp	r0, #0
 8004594:	d0ed      	beq.n	8004572 <_realloc_r+0x1e>
 8004596:	42bc      	cmp	r4, r7
 8004598:	4622      	mov	r2, r4
 800459a:	4631      	mov	r1, r6
 800459c:	bf28      	it	cs
 800459e:	463a      	movcs	r2, r7
 80045a0:	f7ff ffca 	bl	8004538 <memcpy>
 80045a4:	4631      	mov	r1, r6
 80045a6:	4640      	mov	r0, r8
 80045a8:	f7ff fbae 	bl	8003d08 <_free_r>
 80045ac:	e7e1      	b.n	8004572 <_realloc_r+0x1e>
 80045ae:	4635      	mov	r5, r6
 80045b0:	e7df      	b.n	8004572 <_realloc_r+0x1e>

080045b2 <_malloc_usable_size_r>:
 80045b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045b6:	1f18      	subs	r0, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	bfbc      	itt	lt
 80045bc:	580b      	ldrlt	r3, [r1, r0]
 80045be:	18c0      	addlt	r0, r0, r3
 80045c0:	4770      	bx	lr
	...

080045c4 <_init>:
 80045c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c6:	bf00      	nop
 80045c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ca:	bc08      	pop	{r3}
 80045cc:	469e      	mov	lr, r3
 80045ce:	4770      	bx	lr

080045d0 <_fini>:
 80045d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d2:	bf00      	nop
 80045d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045d6:	bc08      	pop	{r3}
 80045d8:	469e      	mov	lr, r3
 80045da:	4770      	bx	lr
